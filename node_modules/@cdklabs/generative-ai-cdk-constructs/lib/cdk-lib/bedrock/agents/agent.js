"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Agent = exports.AgentBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const bedrock = require("aws-cdk-lib/aws-bedrock");
const iam = require("aws-cdk-lib/aws-iam");
const kms = require("aws-cdk-lib/aws-kms");
// Internal Libs
const action_group_1 = require("./action-group");
const agent_alias_1 = require("./agent-alias");
const utils_1 = require("../../../common/helpers/utils");
const validation = require("../../../common/helpers/validation-helpers");
/******************************************************************************
 *                        ABSTRACT BASE CLASS
 *****************************************************************************/
/**
 * Abstract base class for an Agent.
 * Contains methods and attributes valid for Agents either created with CDK or imported.
 */
class AgentBase extends aws_cdk_lib_1.Resource {
}
exports.AgentBase = AgentBase;
_a = JSII_RTTI_SYMBOL_1;
AgentBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.AgentBase", version: "0.1.293" };
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Class to create (or import) an Agent with CDK.
 * @cloudformationResource AWS::Bedrock::Agent
 */
class Agent extends AgentBase {
    /**
     * Static Method for importing an existing Bedrock Agent.
     */
    static fromAgentAttrs(scope, id, attrs) {
        class Import extends AgentBase {
            constructor() {
                super(...arguments);
                this.agentArn = attrs.agentArn;
                this.agentId = aws_cdk_lib_1.Arn.split(attrs.agentArn, aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME).resourceName;
                this.role = iam.Role.fromRoleArn(scope, `${id}Role`, attrs.roleArn);
                this.kmsKey = attrs.kmsKeyArn ? kms.Key.fromKeyArn(scope, `${id}Key`, attrs.kmsKeyArn) : undefined;
                this.lastUpdated = attrs.lastUpdated;
                this.agentVersion = attrs.agentVersion ?? 'DRAFT';
            }
        }
        // Return new Agent
        return new Import(scope, id);
    }
    // ------------------------------------------------------
    // CONSTRUCTOR
    // ------------------------------------------------------
    constructor(scope, id, props) {
        super(scope, id);
        // ------------------------------------------------------
        // Validators
        // ------------------------------------------------------
        /**
         * Checks if the KB Association is valid
         *
         * @internal This is an internal core function and should not be called directly.
         */
        this.validateKnowledgeBase = (knowledgeBase) => {
            const MAX_LENGTH = 200;
            const description = knowledgeBase.instruction ?? knowledgeBase.description;
            const errors = [];
            // If at least one of the previous has been defined
            if (description) {
                errors.push(...validation.validateStringFieldLength({
                    value: description,
                    fieldName: 'description',
                    minLength: 0,
                    maxLength: MAX_LENGTH,
                }));
            }
            else {
                errors.push('If instructionForAgents is not provided, the description property of the KnowledgeBase ' +
                    `${knowledgeBase.knowledgeBaseId} must be provided.`);
            }
            return errors;
        };
        /**
         * Checks if the KB Associations are valid
         *
         * @internal This is an internal core function and should not be called directly.
         */
        this.validateKnowledgeBaseAssocations = () => {
            const MAX_KB_ASSOCIATIONS = 10;
            const errors = [];
            if (this.knowledgeBases.length > MAX_KB_ASSOCIATIONS) {
                errors.push(`The maximum number of knowledge bases associations is ${MAX_KB_ASSOCIATIONS}.`);
            }
            for (const kb of this.knowledgeBases) {
                this.validateKnowledgeBase(kb);
            }
            return errors;
        };
        /**
         * Checks if the Guardrail is valid
         *
         * @internal This is an internal core function and should not be called directly.
         */
        this.validateGuardrail = (guardrail) => {
            const errors = [];
            if (this.guardrail) {
                errors.push(`Cannot add Guardrail ${guardrail.guardrailId}. ` +
                    `Guardrail ${this.guardrail.guardrailId} has already been specified for this agent.`);
            }
            errors.push(...validation.validateFieldPattern(guardrail.guardrailVersion, 'version', /^(([0-9]{1,8})|(DRAFT))$/));
            return errors;
        };
        /**
         * Check if the action group is valid
         */
        this.validateActionGroup = (actionGroup) => {
            console.log('Validating action group: ', actionGroup.name);
            let errors = [];
            // Find if there is a conflicting action group name
            if (this.actionGroups?.find(ag => ag.name === actionGroup.name)) {
                errors.push(`An action group with name: ${actionGroup.name} has already been defined`);
            }
            return errors;
        };
        // ------------------------------------------------------
        // Set properties and defaults
        // ------------------------------------------------------
        this.name =
            props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'bedrock-agent', { maxLength: 64, lower: true, separator: '-' });
        this.idleSessionTTL = props.idleSessionTTL ?? aws_cdk_lib_1.Duration.hours(1);
        this.shouldPrepareAgent = props.shouldPrepareAgent ?? false;
        this.userInputEnabled = props.userInputEnabled ?? false;
        this.codeInterpreterEnabled = props.codeInterpreterEnabled ?? false;
        this.foundationModel = props.foundationModel;
        this.forceDelete = props.forceDelete ?? false;
        // Optional
        this.description = props.description;
        this.instruction = props.instruction;
        this.promptOverrideConfiguration = props.promptOverrideConfiguration;
        this.kmsKey = props.kmsKey;
        // ------------------------------------------------------
        // Role
        // ------------------------------------------------------
        // If existing role is provided, use it.
        if (props.existingRole) {
            this.role = props.existingRole;
            // Otherwise, create a new one
        }
        else {
            this.role = new iam.Role(this, 'Role', {
                // generate a role name
                roleName: (0, utils_1.generatePhysicalNameV2)(this, 'AmazonBedrockExecutionRoleForAgents_', { maxLength: 64, lower: false }),
                // ensure the role has a trust policy that allows the Bedrock service to assume the role
                assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com').withConditions({
                    StringEquals: {
                        'aws:SourceAccount': aws_cdk_lib_1.Stack.of(this).account,
                    },
                    ArnLike: {
                        'aws:SourceArn': aws_cdk_lib_1.Stack.of(this).formatArn({
                            service: 'bedrock',
                            resource: 'agent',
                            resourceName: '*',
                            arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                        }),
                    },
                }),
            });
        }
        // ------------------------------------------------------
        // Set Lazy Props initial values
        // ------------------------------------------------------
        this.knowledgeBases = [];
        this.actionGroups = [];
        // Add Default Action Groups
        this.addActionGroup(action_group_1.AgentActionGroup.userInput(this.userInputEnabled));
        this.addActionGroup(action_group_1.AgentActionGroup.codeInterpreter(this.codeInterpreterEnabled));
        // Add specified elems through methods to handle permissions
        // this needs to happen after role creation / assignment
        props.knowledgeBases?.forEach(kb => {
            this.addKnowledgeBase(kb);
        });
        props.actionGroups?.forEach(ag => {
            this.addActionGroup(ag);
        });
        if (props.guardrail) {
            this.addGuardrail(props.guardrail);
        }
        // ------------------------------------------------------
        // Set Lazy Validations
        // ------------------------------------------------------
        this.node.addValidation({
            validate: () => this.validateKnowledgeBaseAssocations(),
        });
        // ------------------------------------------------------
        // CFN Props - With Lazy support
        // ------------------------------------------------------
        const cfnProps = {
            actionGroups: aws_cdk_lib_1.Lazy.any({ produce: () => this.renderActionGroups() }, { omitEmptyArray: true }),
            agentName: this.name,
            agentResourceRoleArn: this.role.roleArn,
            autoPrepare: this.shouldPrepareAgent,
            customerEncryptionKeyArn: props.kmsKey?.keyArn,
            description: props.description,
            foundationModel: this.foundationModel.invokableArn,
            guardrailConfiguration: aws_cdk_lib_1.Lazy.any({ produce: () => this.renderGuardrail() }),
            idleSessionTtlInSeconds: this.idleSessionTTL.toSeconds(),
            instruction: props.instruction,
            knowledgeBases: aws_cdk_lib_1.Lazy.any({ produce: () => this.renderKnowledgeBases() }, { omitEmptyArray: true }),
            promptOverrideConfiguration: this.promptOverrideConfiguration?._render(),
            skipResourceInUseCheckOnDelete: this.forceDelete,
        };
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this.__resource = new bedrock.CfnAgent(this, 'AgentResource', cfnProps);
        this.agentId = this.__resource.attrAgentId;
        this.agentArn = this.__resource.attrAgentArn;
        this.agentVersion = this.__resource.attrAgentVersion;
        this.lastUpdated = this.__resource.attrUpdatedAt;
        // Add explicit dependency between the agent resource and the agent's role default policy
        // See https://github.com/awslabs/generative-ai-cdk-constructs/issues/899
        if (!props.existingRole) {
            // add the appropriate permissions to use the FM
            const grant = this.foundationModel.grantInvoke(this.role);
            grant.applyBefore(this.__resource);
        }
        this.testAlias = agent_alias_1.AgentAlias.fromAttributes(this, 'DefaultAlias', {
            aliasId: 'TSTALIASID',
            aliasName: 'AgentTestAlias',
            agentVersion: 'DRAFT',
            agent: this,
        });
    }
    // ------------------------------------------------------
    // HELPER METHODS - addX()
    // ------------------------------------------------------
    /**
     * Add knowledge base to the agent.
     */
    addKnowledgeBase(knowledgeBase) {
        // Do some checks
        validation.throwIfInvalid(this.validateKnowledgeBase, knowledgeBase);
        // Add it to the array
        this.knowledgeBases.push(knowledgeBase);
        // Add the appropriate Permissions to query the Knowledge Base
        knowledgeBase.grantQuery(this.role);
    }
    /**
     * Add guardrail to the agent.
     */
    addGuardrail(guardrail) {
        // Do some checks
        validation.throwIfInvalid(this.validateGuardrail, guardrail);
        // Add it to the construct
        this.guardrail = guardrail;
        // Handle permissions
        guardrail.grantApply(this.role);
    }
    /**
     * Add an action group to the agent.
     */
    addActionGroup(actionGroup) {
        // Do some checks
        validation.throwIfInvalid(this.validateActionGroup, actionGroup);
        // Add it to the array
        this.actionGroups.push(actionGroup);
        // Handle permissions to invoke the lambda function
        actionGroup.executor?.lambdaFunction?.grantInvoke(this.role);
        actionGroup.executor?.lambdaFunction?.addPermission(`LambdaInvocationPolicy-${this.node.addr.slice(0, 16)}`, {
            principal: new iam.ServicePrincipal('bedrock.amazonaws.com'),
            sourceArn: this.agentArn,
            sourceAccount: aws_cdk_lib_1.Stack.of(this).account,
        });
    }
    /**
     * Add multiple action groups to the agent.
     */
    addActionGroups(...actionGroups) {
        actionGroups.forEach(ag => this.addActionGroup(ag));
    }
    // ------------------------------------------------------
    // Lazy Renderers
    // ------------------------------------------------------
    /**
     * Render the guardrail configuration.
     *
     * @internal This is an internal core function and should not be called directly.
     */
    renderGuardrail() {
        return this.guardrail
            ? {
                guardrailIdentifier: this.guardrail.guardrailId,
                guardrailVersion: this.guardrail.guardrailVersion,
            }
            : undefined;
    }
    /**
     * Render the knowledge base associations.
     *
     * @internal This is an internal core function and should not be called directly.
     */
    renderKnowledgeBases() {
        const knowledgeBaseAssociationsCfn = [];
        // Build the associations in the CFN format
        this.knowledgeBases.forEach(kb => {
            knowledgeBaseAssociationsCfn.push({
                knowledgeBaseId: kb.knowledgeBaseId,
                knowledgeBaseState: 'ENABLED',
                // at least one is defined as it has been validated when adding the kb
                description: kb.instruction ?? kb.description,
            });
        });
        return knowledgeBaseAssociationsCfn;
    }
    /**
     * Render the action groups
     *
     * @internal This is an internal core function and should not be called directly.
     */
    renderActionGroups() {
        const actionGroupsCfn = [];
        // Build the associations in the CFN format
        this.actionGroups.forEach(ag => {
            actionGroupsCfn.push(ag._render());
        });
        return actionGroupsCfn;
    }
}
exports.Agent = Agent;
_b = JSII_RTTI_SYMBOL_1;
Agent[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.Agent", version: "0.1.293" };
//# sourceMappingURL=data:application/json;base64,