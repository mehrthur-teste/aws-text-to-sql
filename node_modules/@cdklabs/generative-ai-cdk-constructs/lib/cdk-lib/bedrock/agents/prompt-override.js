"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromptOverrideConfiguration = exports.AgentStepType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const validation = require("../../../common/helpers/validation-helpers");
/**
 * The step in the agent sequence where to set a specific prompt configuration.
 */
var AgentStepType;
(function (AgentStepType) {
    AgentStepType["PRE_PROCESSING"] = "PRE_PROCESSING";
    AgentStepType["ORCHESTRATION"] = "ORCHESTRATION";
    AgentStepType["POST_PROCESSING"] = "POST_PROCESSING";
    AgentStepType["KNOWLEDGE_BASE_RESPONSE_GENERATION"] = "KNOWLEDGE_BASE_RESPONSE_GENERATION";
})(AgentStepType || (exports.AgentStepType = AgentStepType = {}));
class PromptOverrideConfiguration {
    static fromSteps(steps) {
        // Create new object
        return new PromptOverrideConfiguration({ steps });
    }
    /**
     * Creates a PromptOverrideConfiguration with a custom Lambda parser function.
     * @param props Configuration including:
     *   - `parser`: Lambda function to use as custom parser
     *   - `steps`: prompt step configurations. At least one of the steps must make use of the custom parser.
     */
    static withCustomParser(props) {
        // Create new object
        return new PromptOverrideConfiguration(props);
    }
    /**
     * Create a new PromptOverrideConfiguration.
     *
     * @internal - This is marked as private so end users leverage it only through static methods
     */
    constructor(props) {
        this.validateInferenceConfig = (config) => {
            const errors = [];
            if (config) {
                if (config.temperature < 0 || config.temperature > 1) {
                    errors.push('Temperature must be between 0 and 1');
                }
                if (config.topP < 0 || config.topP > 1) {
                    errors.push('TopP must be between 0 and 1');
                }
                if (config.topK < 0 || config.topK > 500) {
                    errors.push('TopK must be between 0 and 500');
                }
                if (config.stopSequences.length > 4) {
                    errors.push('Maximum 4 stop sequences allowed');
                }
                if (config.maximumLength < 0 || config.maximumLength > 4096) {
                    errors.push('MaximumLength must be between 0 and 4096');
                }
            }
            return errors;
        };
        this.validateSteps = (steps) => {
            const errors = [];
            if (!steps || steps.length === 0) {
                errors.push('Steps array cannot be empty');
            }
            // Validate each step's inference config
            steps?.forEach(step => {
                const inferenceErrors = this.validateInferenceConfig(step.inferenceConfig);
                if (inferenceErrors.length > 0) {
                    errors.push(`Step ${step.stepType}: ${inferenceErrors.join(', ')}`);
                }
            });
            return errors;
        };
        this.validateCustomParser = (steps) => {
            const errors = [];
            const hasCustomParser = steps?.some(step => step.useCustomParser);
            if (!hasCustomParser) {
                errors.push('At least one step must use custom parser');
            }
            return errors;
        };
        // Validate props
        validation.throwIfInvalid(this.validateSteps, props.steps);
        if (props.parser) {
            validation.throwIfInvalid(this.validateCustomParser, props.steps);
        }
        this.parser = props.parser;
        this.steps = props.steps;
    }
    /**
     * Format as CfnAgent.PromptOverrideConfigurationProperty
     *
     * @internal This is an internal core function and should not be called directly.
     */
    _render() {
        return {
            overrideLambda: this.parser?.functionArn,
            promptConfigurations: this.steps?.map(step => ({
                // prettier-ignore
                promptType: step.stepType,
                /** Maps stepEnabled (true → 'ENABLED', false → 'DISABLED', undefined → undefined (uses CFN DEFAULT)) */
                promptState: step?.stepEnabled === undefined ? undefined : step.stepEnabled ? 'ENABLED' : 'DISABLED',
                /** Maps stepEnabled (true → 'OVERRIDDEN', false → 'DEFAULT', undefined → undefined (uses CFN DEFAULT)) */
                // prettier-ignore
                parserMode: step?.useCustomParser === undefined
                    ? undefined
                    : step?.useCustomParser ? 'OVERRIDDEN' : 'DEFAULT',
                // Use custom prompt template if provided, otherwise use default
                // prettier-ignore
                promptCreationMode: step?.customPromptTemplate === undefined
                    ? undefined
                    : step?.customPromptTemplate ? 'OVERRIDDEN' : 'DEFAULT',
                basePromptTemplate: step.customPromptTemplate,
                inferenceConfiguration: step.inferenceConfig,
            })) || [],
        };
    }
}
exports.PromptOverrideConfiguration = PromptOverrideConfiguration;
_a = JSII_RTTI_SYMBOL_1;
PromptOverrideConfiguration[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.PromptOverrideConfiguration", version: "0.1.293" };
//# sourceMappingURL=data:application/json;base64,