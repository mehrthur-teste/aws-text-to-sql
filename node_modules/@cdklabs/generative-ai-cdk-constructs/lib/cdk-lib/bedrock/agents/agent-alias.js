"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentAlias = exports.AgentAliasBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const events = require("aws-cdk-lib/aws-events");
const iam = require("aws-cdk-lib/aws-iam");
const helpers_internal_1 = require("aws-cdk-lib/core/lib/helpers-internal");
/******************************************************************************
 *                        ABSTRACT BASE CLASS
 *****************************************************************************/
/**
 * Abstract base class for an Agent.
 * Contains methods and attributes valid for Agents either created with CDK or imported.
 */
class AgentAliasBase extends aws_cdk_lib_1.Resource {
    /**
     * Grant the given principal identity permissions to perform actions on this agent alias.
     */
    grant(grantee, ...actions) {
        return iam.Grant.addToPrincipal({
            grantee,
            actions,
            resourceArns: [this.aliasArn],
            scope: this,
        });
    }
    /**
     * Grant the given identity permissions to invoke the agent alias.
     */
    grantInvoke(grantee) {
        return this.grant(grantee, 'bedrock:InvokeAgent');
    }
    /**
     * Define an EventBridge rule that triggers when something happens to this agent alias
     *
     * Requires that there exists at least one CloudTrail Trail in your account
     * that captures the event. This method will not create the Trail.
     *
     * @param id The id of the rule
     * @param options Options for adding the rule
     */
    onCloudTrailEvent(id, options = {}) {
        const rule = new events.Rule(this, id, options);
        rule.addTarget(options.target);
        rule.addEventPattern({
            source: ['aws.bedrock'],
            detailType: ['AWS API Call via CloudTrail'],
            detail: {
                requestParameters: {
                    agentAliasId: [this.aliasId],
                },
            },
        });
        return rule;
    }
}
exports.AgentAliasBase = AgentAliasBase;
_a = JSII_RTTI_SYMBOL_1;
AgentAliasBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.AgentAliasBase", version: "0.1.293" };
/******************************************************************************
 *                        NEW CONSTRUCT DEFINITION
 *****************************************************************************/
/**
 * Class to create an Agent Alias with CDK.
 * @cloudformationResource AWS::Bedrock::AgentAlias
 */
class AgentAlias extends AgentAliasBase {
    // ------------------------------------------------------
    // Imports
    // ------------------------------------------------------
    /**
     * Brings an Agent Alias from an existing one created outside of CDK.
     */
    static fromAttributes(scope, id, attrs) {
        class Import extends AgentAliasBase {
            constructor() {
                super(...arguments);
                this.agent = attrs.agent;
                this.aliasId = attrs.aliasId;
                this.aliasName = attrs.aliasName;
                this.aliasArn = aws_cdk_lib_1.Stack.of(scope).formatArn({
                    resource: 'agent-alias',
                    service: 'bedrock',
                    resourceName: `${attrs.agent.agentId}/${attrs.aliasId}`,
                    arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                });
            }
        }
        return new Import(scope, id);
    }
    // ------------------------------------------------------
    // CONSTRUCTOR
    // ------------------------------------------------------
    constructor(scope, id, props) {
        super(scope, id);
        // Compute hash from agent, to recreate the resource when agent has changed
        const hash = (0, helpers_internal_1.md5hash)(props.agent.agentId + props.agentVersion + props.agent.lastUpdated);
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        // see https://github.com/awslabs/generative-ai-cdk-constructs/issues/947
        this.aliasName = props.aliasName ?? `latest-${hash}`;
        this.agent = props.agent;
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        const alias = new aws_cdk_lib_1.aws_bedrock.CfnAgentAlias(this, `MyCfnAgentAlias+${hash}`, {
            agentAliasName: this.aliasName,
            agentId: this.agent.agentId,
            description: props.description,
            routingConfiguration: props.agentVersion
                ? [
                    {
                        agentVersion: props.agentVersion,
                    },
                ]
                : undefined,
        });
        this.aliasId = alias.attrAgentAliasId;
        this.aliasArn = alias.attrAgentAliasArn;
    }
}
exports.AgentAlias = AgentAlias;
_b = JSII_RTTI_SYMBOL_1;
AgentAlias[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.AgentAlias", version: "0.1.293" };
//# sourceMappingURL=data:application/json;base64,