"use strict";
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataSource = exports.DataSourceNew = exports.DataSourceBase = exports.DataSourceType = exports.DataDeletionPolicy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
// import { PolicyStatement } from 'aws-cdk-lib/aws-iam';
/**
 * Specifies the policy for handling data when a data source resource is deleted.
 * This policy affects the vector embeddings created from the data source.
 */
var DataDeletionPolicy;
(function (DataDeletionPolicy) {
    /**
     * Deletes all vector embeddings derived from the data source upon deletion
     * of a data source resource.
     */
    DataDeletionPolicy["DELETE"] = "DELETE";
    /**
     * Retains all vector embeddings derived from the data source even after
     * deletion of a data source resource.
     */
    DataDeletionPolicy["RETAIN"] = "RETAIN";
})(DataDeletionPolicy || (exports.DataDeletionPolicy = DataDeletionPolicy = {}));
/**
 * Represents the types of data sources that can be associated to an Knowledge Base.
 */
var DataSourceType;
(function (DataSourceType) {
    /**
     * Amazon S3 Bucket data source.
     */
    DataSourceType["S3"] = "S3";
    /**
     * Confluence Cloud Instance data source.
     */
    DataSourceType["CONFLUENCE"] = "CONFLUENCE";
    /**
     * Salesforce instance data source.
     */
    DataSourceType["SALESFORCE"] = "SALESFORCE";
    /**
     * Microsoft SharePoint instance data source.
     */
    DataSourceType["SHAREPOINT"] = "SHAREPOINT";
    /**
     * Web Crawler data source.
     * Extracts content from authorized public web pages using a crawler.
     */
    DataSourceType["WEB_CRAWLER"] = "WEB";
})(DataSourceType || (exports.DataSourceType = DataSourceType = {}));
/**
 * Specifies the base class for all data source resources (imported and new).
 */
class DataSourceBase extends aws_cdk_lib_1.Resource {
}
exports.DataSourceBase = DataSourceBase;
_a = JSII_RTTI_SYMBOL_1;
DataSourceBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.DataSourceBase", version: "0.1.293" };
/**
 * Specifies the base class for all NEW data source resources of ANY type.
 */
class DataSourceNew extends DataSourceBase {
    // ------------------------------------------------------
    // Common methods for ALL NEW data sources
    // ------------------------------------------------------
    /**
     * Adds appropriate permissions to the KB execution role needed by the data source.
     */
    handleCommonPermissions(props) {
        let statementsToAdd = [];
        // Parsing strategy requires access to the parsing FM, so be sure to add permissions
        if (props.parsingStrategy) {
            statementsToAdd.push(...props.parsingStrategy.generatePolicyStatements());
        }
        // Custom transformation requires invoke permissions for the Lambda
        if (props.customTransformation) {
            statementsToAdd.push(...props.customTransformation.generatePolicyStatements(this));
        }
        // Add the permission statements to the KB execution role
        statementsToAdd.forEach(statement => {
            this.knowledgeBase.role.addToPrincipalPolicy(statement);
        });
    }
    /**
     * Formats the data source configuration properties for CloudFormation.
     */
    formatAsCfnProps(props, dataSourceConfiguration) {
        return {
            dataDeletionPolicy: props.dataDeletionPolicy,
            dataSourceConfiguration: dataSourceConfiguration,
            description: props.description,
            knowledgeBaseId: this.knowledgeBase.knowledgeBaseId,
            name: this.dataSourceName,
            serverSideEncryptionConfiguration: props.kmsKey
                ? {
                    kmsKeyArn: props.kmsKey.keyArn,
                }
                : undefined,
            vectorIngestionConfiguration: props.chunkingStrategy || props.parsingStrategy || props.customTransformation
                ? {
                    chunkingConfiguration: props.chunkingStrategy?.configuration,
                    parsingConfiguration: props.parsingStrategy?.configuration,
                    customTransformationConfiguration: props.customTransformation?.configuration,
                }
                : undefined,
        };
    }
}
exports.DataSourceNew = DataSourceNew;
_b = JSII_RTTI_SYMBOL_1;
DataSourceNew[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.DataSourceNew", version: "0.1.293" };
class DataSource extends DataSourceBase {
    static fromDataSourceId(scope, id, dataSourceId) {
        return new DataSource(scope, id, dataSourceId);
    }
    constructor(scope, id, dataSourceId) {
        super(scope, id);
        this.dataSourceId = dataSourceId;
    }
}
exports.DataSource = DataSource;
_c = JSII_RTTI_SYMBOL_1;
DataSource[_c] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.DataSource", version: "0.1.293" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1kYXRhLXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jZGstbGliL2JlZHJvY2svZGF0YS1zb3VyY2VzL2Jhc2UtZGF0YS1zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUVILDZDQUFrRDtBQVVsRCx5REFBeUQ7QUFFekQ7OztHQUdHO0FBQ0gsSUFBWSxrQkFZWDtBQVpELFdBQVksa0JBQWtCO0lBQzVCOzs7T0FHRztJQUNILHVDQUFpQixDQUFBO0lBRWpCOzs7T0FHRztJQUNILHVDQUFpQixDQUFBO0FBQ25CLENBQUMsRUFaVyxrQkFBa0Isa0NBQWxCLGtCQUFrQixRQVk3QjtBQUVEOztHQUVHO0FBQ0gsSUFBWSxjQTBCWDtBQTFCRCxXQUFZLGNBQWM7SUFDeEI7O09BRUc7SUFDSCwyQkFBUyxDQUFBO0lBRVQ7O09BRUc7SUFDSCwyQ0FBeUIsQ0FBQTtJQUV6Qjs7T0FFRztJQUNILDJDQUF5QixDQUFBO0lBRXpCOztPQUVHO0lBQ0gsMkNBQXlCLENBQUE7SUFFekI7OztPQUdHO0lBQ0gscUNBQW1CLENBQUE7QUFDckIsQ0FBQyxFQTFCVyxjQUFjLDhCQUFkLGNBQWMsUUEwQnpCO0FBYUQ7O0dBRUc7QUFDSCxNQUFzQixjQUFlLFNBQVEsc0JBQVE7O0FBQXJELHdDQVFDOzs7QUEwREQ7O0dBRUc7QUFDSCxNQUFzQixhQUFjLFNBQVEsY0FBYztJQXVCeEQseURBQXlEO0lBQ3pELDBDQUEwQztJQUMxQyx5REFBeUQ7SUFFekQ7O09BRUc7SUFDSSx1QkFBdUIsQ0FBQyxLQUFpQztRQUM5RCxJQUFJLGVBQWUsR0FBc0IsRUFBRSxDQUFDO1FBQzVDLG9GQUFvRjtRQUNwRixJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUMxQixlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLENBQUM7UUFDNUUsQ0FBQztRQUNELG1FQUFtRTtRQUNuRSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1lBQy9CLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsb0JBQW9CLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyRixDQUFDO1FBQ0QseURBQXlEO1FBQ3pELGVBQWUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxnQkFBZ0IsQ0FDckIsS0FBaUMsRUFDakMsdUJBQXNFO1FBRXRFLE9BQU87WUFDTCxrQkFBa0IsRUFBRSxLQUFLLENBQUMsa0JBQWtCO1lBQzVDLHVCQUF1QixFQUFFLHVCQUF1QjtZQUNoRCxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZTtZQUNuRCxJQUFJLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDekIsaUNBQWlDLEVBQUUsS0FBSyxDQUFDLE1BQU07Z0JBQzdDLENBQUMsQ0FBQztvQkFDQSxTQUFTLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNO2lCQUMvQjtnQkFDRCxDQUFDLENBQUMsU0FBUztZQUNiLDRCQUE0QixFQUMxQixLQUFLLENBQUMsZ0JBQWdCLElBQUksS0FBSyxDQUFDLGVBQWUsSUFBSSxLQUFLLENBQUMsb0JBQW9CO2dCQUMzRSxDQUFDLENBQUM7b0JBQ0EscUJBQXFCLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixFQUFFLGFBQWE7b0JBQzVELG9CQUFvQixFQUFFLEtBQUssQ0FBQyxlQUFlLEVBQUUsYUFBYTtvQkFDMUQsaUNBQWlDLEVBQUUsS0FBSyxDQUFDLG9CQUFvQixFQUFFLGFBQWE7aUJBQzdFO2dCQUNELENBQUMsQ0FBQyxTQUFTO1NBQ2hCLENBQUM7SUFDSixDQUFDOztBQXpFSCxzQ0EwRUM7OztBQUVELE1BQWEsVUFBVyxTQUFRLGNBQWM7SUFDckMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQWdCLEVBQUUsRUFBVSxFQUFFLFlBQW9CO1FBQy9FLE9BQU8sSUFBSSxVQUFVLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBSUQsWUFBb0IsS0FBZ0IsRUFBRSxFQUFVLEVBQUUsWUFBb0I7UUFDcEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNuQyxDQUFDOztBQVZILGdDQVdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSVJlc291cmNlLCBSZXNvdXJjZSB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENmbkRhdGFTb3VyY2UsIENmbkRhdGFTb3VyY2VQcm9wcyB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1iZWRyb2NrJztcbmltcG9ydCB7IFBvbGljeVN0YXRlbWVudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMga21zIGZyb20gJ2F3cy1jZGstbGliL2F3cy1rbXMnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbmltcG9ydCB7IElLbm93bGVkZ2VCYXNlIH0gZnJvbSAnLi8uLi9rbm93bGVkZ2UtYmFzZXMva25vd2xlZGdlLWJhc2UnO1xuaW1wb3J0IHsgQ2h1bmtpbmdTdHJhdGVneSB9IGZyb20gJy4vY2h1bmtpbmcnO1xuaW1wb3J0IHsgQ3VzdG9tVHJhbnNmb3JtYXRpb24gfSBmcm9tICcuL2N1c3RvbS10cmFuc2Zvcm1hdGlvbic7XG5pbXBvcnQgeyBQYXJzaW5nU3RhdGVneSB9IGZyb20gJy4vcGFyc2luZyc7XG4vLyBpbXBvcnQgeyBQb2xpY3lTdGF0ZW1lbnQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcblxuLyoqXG4gKiBTcGVjaWZpZXMgdGhlIHBvbGljeSBmb3IgaGFuZGxpbmcgZGF0YSB3aGVuIGEgZGF0YSBzb3VyY2UgcmVzb3VyY2UgaXMgZGVsZXRlZC5cbiAqIFRoaXMgcG9saWN5IGFmZmVjdHMgdGhlIHZlY3RvciBlbWJlZGRpbmdzIGNyZWF0ZWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuXG4gKi9cbmV4cG9ydCBlbnVtIERhdGFEZWxldGlvblBvbGljeSB7XG4gIC8qKlxuICAgKiBEZWxldGVzIGFsbCB2ZWN0b3IgZW1iZWRkaW5ncyBkZXJpdmVkIGZyb20gdGhlIGRhdGEgc291cmNlIHVwb24gZGVsZXRpb25cbiAgICogb2YgYSBkYXRhIHNvdXJjZSByZXNvdXJjZS5cbiAgICovXG4gIERFTEVURSA9ICdERUxFVEUnLFxuXG4gIC8qKlxuICAgKiBSZXRhaW5zIGFsbCB2ZWN0b3IgZW1iZWRkaW5ncyBkZXJpdmVkIGZyb20gdGhlIGRhdGEgc291cmNlIGV2ZW4gYWZ0ZXJcbiAgICogZGVsZXRpb24gb2YgYSBkYXRhIHNvdXJjZSByZXNvdXJjZS5cbiAgICovXG4gIFJFVEFJTiA9ICdSRVRBSU4nLFxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHR5cGVzIG9mIGRhdGEgc291cmNlcyB0aGF0IGNhbiBiZSBhc3NvY2lhdGVkIHRvIGFuIEtub3dsZWRnZSBCYXNlLlxuICovXG5leHBvcnQgZW51bSBEYXRhU291cmNlVHlwZSB7XG4gIC8qKlxuICAgKiBBbWF6b24gUzMgQnVja2V0IGRhdGEgc291cmNlLlxuICAgKi9cbiAgUzMgPSAnUzMnLFxuXG4gIC8qKlxuICAgKiBDb25mbHVlbmNlIENsb3VkIEluc3RhbmNlIGRhdGEgc291cmNlLlxuICAgKi9cbiAgQ09ORkxVRU5DRSA9ICdDT05GTFVFTkNFJyxcblxuICAvKipcbiAgICogU2FsZXNmb3JjZSBpbnN0YW5jZSBkYXRhIHNvdXJjZS5cbiAgICovXG4gIFNBTEVTRk9SQ0UgPSAnU0FMRVNGT1JDRScsXG5cbiAgLyoqXG4gICAqIE1pY3Jvc29mdCBTaGFyZVBvaW50IGluc3RhbmNlIGRhdGEgc291cmNlLlxuICAgKi9cbiAgU0hBUkVQT0lOVCA9ICdTSEFSRVBPSU5UJyxcblxuICAvKipcbiAgICogV2ViIENyYXdsZXIgZGF0YSBzb3VyY2UuXG4gICAqIEV4dHJhY3RzIGNvbnRlbnQgZnJvbSBhdXRob3JpemVkIHB1YmxpYyB3ZWIgcGFnZXMgdXNpbmcgYSBjcmF3bGVyLlxuICAgKi9cbiAgV0VCX0NSQVdMRVIgPSAnV0VCJyxcbn1cblxuLyoqXG4gKiBTcGVjaWZpZXMgaW50ZXJmYWNlIGZvciByZXNvdXJjZXMgY3JlYXRlZCB3aXRoIENESyBvciBpbXBvcnRlZCBpbnRvIENESy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRGF0YVNvdXJjZSBleHRlbmRzIElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGRhdGEgc291cmNlLlxuICAgKiBAZXhhbXBsZSAnSkhVRVZYVVpNVSdcbiAgICovXG4gIHJlYWRvbmx5IGRhdGFTb3VyY2VJZDogc3RyaW5nO1xufVxuXG4vKipcbiAqIFNwZWNpZmllcyB0aGUgYmFzZSBjbGFzcyBmb3IgYWxsIGRhdGEgc291cmNlIHJlc291cmNlcyAoaW1wb3J0ZWQgYW5kIG5ldykuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEYXRhU291cmNlQmFzZSBleHRlbmRzIFJlc291cmNlIGltcGxlbWVudHMgSURhdGFTb3VyY2Uge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBkYXRhIHNvdXJjZS5cbiAgICogQGV4YW1wbGUgJ0pIVUVWWFVaTVUnXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgZGF0YVNvdXJjZUlkOiBzdHJpbmc7XG5cbiAgLy8gQ29tbW9uIG1ldGhvZHMgZm9yIGltcG9ydGVkIGFuZCBuZXcgZGF0YSBzb3VyY2VzIGdvIGhlcmVcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGNvbW1vbiBmb3IgY3JlYXRpbmcgYW55IG9mIHRoZSBkaWZmZXJlbnQgZGF0YSBzb3VyY2UgdHlwZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVNvdXJjZUFzc29jaWF0aW9uUHJvcHMge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIEEgbmV3IG5hbWUgd2lsbCBiZSBnZW5lcmF0ZWQuXG4gICAqL1xuICByZWFkb25seSBkYXRhU291cmNlTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogQSBkZXNjcmlwdGlvbiBvZiB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gTm8gZGVzY3JpcHRpb24gaXMgcHJvdmlkZWQuXG4gICAqL1xuICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIEtNUyBrZXkgdG8gdXNlIHRvIGVuY3J5cHQgdGhlIGRhdGEgc291cmNlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIFNlcnZpY2Ugb3duZWQgYW5kIG1hbmFnZWQga2V5LlxuICAgKi9cbiAgcmVhZG9ubHkga21zS2V5Pzoga21zLklLZXk7XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRhIGRlbGV0aW9uIHBvbGljeSB0byBhcHBseSB0byB0aGUgZGF0YSBzb3VyY2UuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gU2V0cyB0aGUgZGF0YSBkZWxldGlvbiBwb2xpY3kgdG8gdGhlIGRlZmF1bHQgb2YgdGhlIGRhdGEgc291cmNlIHR5cGUuXG4gICAqL1xuICByZWFkb25seSBkYXRhRGVsZXRpb25Qb2xpY3k/OiBEYXRhRGVsZXRpb25Qb2xpY3k7XG5cbiAgLyoqXG4gICAqIFRoZSBjaHVua2luZyBzdGF0ZWd5IHRvIHVzZSBmb3Igc3BsaXR0aW5nIHlvdXIgZG9jdW1lbnRzIG9yIGNvbnRlbnQuXG4gICAqIFRoZSBjaHVua3MgYXJlIHRoZW4gY29udmVydGVkIHRvIGVtYmVkZGluZ3MgYW5kIHdyaXR0ZW4gdG8gdGhlIHZlY3RvclxuICAgKiBpbmRleCBhbGxvd2luZyBmb3Igc2ltaWxhcml0eSBzZWFyY2ggYW5kIHJldHJpZXZhbCBvZiB0aGUgY29udGVudC5cbiAgICpcbiAgICogQGRlZmF1bHQgQ2h1bmtpbmdTdHJhdGVneS5ERUZBVUxUXG4gICAqL1xuICByZWFkb25seSBjaHVua2luZ1N0cmF0ZWd5PzogQ2h1bmtpbmdTdHJhdGVneTtcblxuICAvKipcbiAgICogVGhlIHBhcnNpbmcgc3RyYXRlZ3kgdG8gdXNlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIFBhcnNpbmcgU3RhdGVneSBpcyB1c2VkLlxuICAgKi9cbiAgcmVhZG9ubHkgcGFyc2luZ1N0cmF0ZWd5PzogUGFyc2luZ1N0YXRlZ3k7XG5cbiAgLyoqXG4gICAqIFRoZSBjdXN0b20gdHJhbnNmb3JtYXRpb24gc3RyYXRlZ3kgdG8gdXNlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIE5vIGN1c3RvbSB0cmFuc2Zvcm1hdGlvbiBpcyB1c2VkLlxuICAgKi9cbiAgcmVhZG9ubHkgY3VzdG9tVHJhbnNmb3JtYXRpb24/OiBDdXN0b21UcmFuc2Zvcm1hdGlvbjtcbn1cblxuLyoqXG4gKiBTcGVjaWZpZXMgdGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBORVcgZGF0YSBzb3VyY2UgcmVzb3VyY2VzIG9mIEFOWSB0eXBlLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGF0YVNvdXJjZU5ldyBleHRlbmRzIERhdGFTb3VyY2VCYXNlIHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgZGF0YSBzb3VyY2UuXG4gICAqIEBleGFtcGxlICdKSFVFVlhVWk1VJ1xuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGRhdGFTb3VyY2VJZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHR5cGUgb2YgZGF0YSBzb3VyY2UuXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgZGF0YVNvdXJjZVR5cGU6IERhdGFTb3VyY2VUeXBlO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGRhdGEgc291cmNlLlxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGRhdGFTb3VyY2VOYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUga25vd2xlZGdlIGJhc2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBkYXRhIHNvdXJjZS5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBrbm93bGVkZ2VCYXNlOiBJS25vd2xlZGdlQmFzZTtcbiAgLyoqXG4gICAqIFRoZSBLTVMga2V5IHRvIHVzZSB0byBlbmNyeXB0IHRoZSBkYXRhIHNvdXJjZS5cbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBrbXNLZXk/OiBrbXMuSUtleTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ29tbW9uIG1ldGhvZHMgZm9yIEFMTCBORVcgZGF0YSBzb3VyY2VzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBZGRzIGFwcHJvcHJpYXRlIHBlcm1pc3Npb25zIHRvIHRoZSBLQiBleGVjdXRpb24gcm9sZSBuZWVkZWQgYnkgdGhlIGRhdGEgc291cmNlLlxuICAgKi9cbiAgcHVibGljIGhhbmRsZUNvbW1vblBlcm1pc3Npb25zKHByb3BzOiBEYXRhU291cmNlQXNzb2NpYXRpb25Qcm9wcykge1xuICAgIGxldCBzdGF0ZW1lbnRzVG9BZGQ6IFBvbGljeVN0YXRlbWVudFtdID0gW107XG4gICAgLy8gUGFyc2luZyBzdHJhdGVneSByZXF1aXJlcyBhY2Nlc3MgdG8gdGhlIHBhcnNpbmcgRk0sIHNvIGJlIHN1cmUgdG8gYWRkIHBlcm1pc3Npb25zXG4gICAgaWYgKHByb3BzLnBhcnNpbmdTdHJhdGVneSkge1xuICAgICAgc3RhdGVtZW50c1RvQWRkLnB1c2goLi4ucHJvcHMucGFyc2luZ1N0cmF0ZWd5LmdlbmVyYXRlUG9saWN5U3RhdGVtZW50cygpKTtcbiAgICB9XG4gICAgLy8gQ3VzdG9tIHRyYW5zZm9ybWF0aW9uIHJlcXVpcmVzIGludm9rZSBwZXJtaXNzaW9ucyBmb3IgdGhlIExhbWJkYVxuICAgIGlmIChwcm9wcy5jdXN0b21UcmFuc2Zvcm1hdGlvbikge1xuICAgICAgc3RhdGVtZW50c1RvQWRkLnB1c2goLi4ucHJvcHMuY3VzdG9tVHJhbnNmb3JtYXRpb24uZ2VuZXJhdGVQb2xpY3lTdGF0ZW1lbnRzKHRoaXMpKTtcbiAgICB9XG4gICAgLy8gQWRkIHRoZSBwZXJtaXNzaW9uIHN0YXRlbWVudHMgdG8gdGhlIEtCIGV4ZWN1dGlvbiByb2xlXG4gICAgc3RhdGVtZW50c1RvQWRkLmZvckVhY2goc3RhdGVtZW50ID0+IHtcbiAgICAgIHRoaXMua25vd2xlZGdlQmFzZS5yb2xlLmFkZFRvUHJpbmNpcGFsUG9saWN5KHN0YXRlbWVudCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0cyB0aGUgZGF0YSBzb3VyY2UgY29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIGZvciBDbG91ZEZvcm1hdGlvbi5cbiAgICovXG4gIHB1YmxpYyBmb3JtYXRBc0NmblByb3BzKFxuICAgIHByb3BzOiBEYXRhU291cmNlQXNzb2NpYXRpb25Qcm9wcyxcbiAgICBkYXRhU291cmNlQ29uZmlndXJhdGlvbjogQ2ZuRGF0YVNvdXJjZS5EYXRhU291cmNlQ29uZmlndXJhdGlvblByb3BlcnR5LFxuICApOiBDZm5EYXRhU291cmNlUHJvcHMge1xuICAgIHJldHVybiB7XG4gICAgICBkYXRhRGVsZXRpb25Qb2xpY3k6IHByb3BzLmRhdGFEZWxldGlvblBvbGljeSxcbiAgICAgIGRhdGFTb3VyY2VDb25maWd1cmF0aW9uOiBkYXRhU291cmNlQ29uZmlndXJhdGlvbixcbiAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICAgIGtub3dsZWRnZUJhc2VJZDogdGhpcy5rbm93bGVkZ2VCYXNlLmtub3dsZWRnZUJhc2VJZCxcbiAgICAgIG5hbWU6IHRoaXMuZGF0YVNvdXJjZU5hbWUsXG4gICAgICBzZXJ2ZXJTaWRlRW5jcnlwdGlvbkNvbmZpZ3VyYXRpb246IHByb3BzLmttc0tleVxuICAgICAgICA/IHtcbiAgICAgICAgICBrbXNLZXlBcm46IHByb3BzLmttc0tleS5rZXlBcm4sXG4gICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICB2ZWN0b3JJbmdlc3Rpb25Db25maWd1cmF0aW9uOlxuICAgICAgICBwcm9wcy5jaHVua2luZ1N0cmF0ZWd5IHx8IHByb3BzLnBhcnNpbmdTdHJhdGVneSB8fCBwcm9wcy5jdXN0b21UcmFuc2Zvcm1hdGlvblxuICAgICAgICAgID8ge1xuICAgICAgICAgICAgY2h1bmtpbmdDb25maWd1cmF0aW9uOiBwcm9wcy5jaHVua2luZ1N0cmF0ZWd5Py5jb25maWd1cmF0aW9uLFxuICAgICAgICAgICAgcGFyc2luZ0NvbmZpZ3VyYXRpb246IHByb3BzLnBhcnNpbmdTdHJhdGVneT8uY29uZmlndXJhdGlvbixcbiAgICAgICAgICAgIGN1c3RvbVRyYW5zZm9ybWF0aW9uQ29uZmlndXJhdGlvbjogcHJvcHMuY3VzdG9tVHJhbnNmb3JtYXRpb24/LmNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgfVxuICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFTb3VyY2UgZXh0ZW5kcyBEYXRhU291cmNlQmFzZSB7XG4gIHB1YmxpYyBzdGF0aWMgZnJvbURhdGFTb3VyY2VJZChzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBkYXRhU291cmNlSWQ6IHN0cmluZyk6IElEYXRhU291cmNlIHtcbiAgICByZXR1cm4gbmV3IERhdGFTb3VyY2Uoc2NvcGUsIGlkLCBkYXRhU291cmNlSWQpO1xuICB9XG5cbiAgcHVibGljIHJlYWRvbmx5IGRhdGFTb3VyY2VJZDogc3RyaW5nO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgZGF0YVNvdXJjZUlkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgIHRoaXMuZGF0YVNvdXJjZUlkID0gZGF0YVNvdXJjZUlkO1xuICB9XG59XG4iXX0=