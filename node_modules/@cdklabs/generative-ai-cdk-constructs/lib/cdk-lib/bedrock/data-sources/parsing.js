"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParsingStategy = exports.ParsingStategyType = exports.ParsingModality = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const default_parsing_prompt_1 = require("./default-parsing-prompt");
var ParsingModality;
(function (ParsingModality) {
    /**
     * Specifies whether to enable parsing of multimodal data, including both text and/or images.
     */
    ParsingModality["MULTIMODAL"] = "MULTIMODAL";
})(ParsingModality || (exports.ParsingModality = ParsingModality = {}));
/**
 * Enum representing the types of parsing strategies available for Amazon Bedrock Knowledge Bases.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/kb-advanced-parsing.html
 */
var ParsingStategyType;
(function (ParsingStategyType) {
    /**
     * Uses a Bedrock Foundation Model for advanced parsing of non-textual information from documents.
     */
    ParsingStategyType["FOUNDATION_MODEL"] = "BEDROCK_FOUNDATION_MODEL";
    /**
     * Processes multimodal data using Bedrock Data Automation (BDA). It leverages
     * generative AI to automate the transformation of multi-modal data into structured formats.
     * If you choose a foundation model or Amazon Bedrock Data Automation for parsing and it fails
     * to parse a file, the Amazon Bedrock default parser is used instead.
     */
    ParsingStategyType["DATA_AUTOMATION"] = "BEDROCK_DATA_AUTOMATION";
})(ParsingStategyType || (exports.ParsingStategyType = ParsingStategyType = {}));
/**
 * Represents an advanced parsing strategy configuration for Knowledge Base ingestion.
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/kb-chunking-parsing.html#kb-advanced-parsing
 */
class ParsingStategy {
    // ------------------------------------------------------
    // FM Parsing Strategy
    // ------------------------------------------------------
    /**
     * Creates a Foundation Model-based parsing strategy for extracting non-textual information
     * from documents such as tables and charts.
     * - Additional costs apply when using advanced parsing due to foundation model usage.
     * - There are limits on file types (PDF) and total data that can be parsed using advanced parsing.
     * @see https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-ds.html#kb-ds-supported-doc-formats-limits
     */
    static foundationModel(props) {
        class FoundationModelTransformation extends ParsingStategy {
            constructor() {
                super(...arguments);
                /** The CloudFormation property representation of this configuration */
                this.configuration = {
                    bedrockFoundationModelConfiguration: {
                        modelArn: props.parsingModel.invokableArn,
                        parsingPrompt: {
                            parsingPromptText: props.parsingPrompt ?? default_parsing_prompt_1.DEFAULT_PARSING_PROMPT,
                        },
                    },
                    parsingStrategy: ParsingStategyType.FOUNDATION_MODEL,
                };
            }
            generatePolicyStatements() {
                return [
                    new aws_iam_1.PolicyStatement({
                        actions: ['bedrock:InvokeModel'],
                        resources: [props.parsingModel.invokableArn],
                    }),
                ];
            }
        }
        return new FoundationModelTransformation();
    }
}
exports.ParsingStategy = ParsingStategy;
_a = JSII_RTTI_SYMBOL_1;
ParsingStategy[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.ParsingStategy", version: "0.1.293" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jZGstbGliL2JlZHJvY2svZGF0YS1zb3VyY2VzL3BhcnNpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFjQSxpREFBc0Q7QUFDdEQscUVBQWtFO0FBR2xFLElBQVksZUFLWDtBQUxELFdBQVksZUFBZTtJQUN6Qjs7T0FFRztJQUNILDRDQUF5QixDQUFBO0FBQzNCLENBQUMsRUFMVyxlQUFlLCtCQUFmLGVBQWUsUUFLMUI7QUFDRDs7O0dBR0c7QUFDSCxJQUFZLGtCQVlYO0FBWkQsV0FBWSxrQkFBa0I7SUFDNUI7O09BRUc7SUFDSCxtRUFBNkMsQ0FBQTtJQUM3Qzs7Ozs7T0FLRztJQUNILGlFQUEyQyxDQUFBO0FBQzdDLENBQUMsRUFaVyxrQkFBa0Isa0NBQWxCLGtCQUFrQixRQVk3QjtBQTJCRDs7O0dBR0c7QUFDSCxNQUFzQixjQUFjO0lBQ2xDLHlEQUF5RDtJQUN6RCxzQkFBc0I7SUFDdEIseURBQXlEO0lBQ3pEOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBeUM7UUFDckUsTUFBTSw2QkFBOEIsU0FBUSxjQUFjO1lBQTFEOztnQkFDRSx1RUFBdUU7Z0JBQ3ZELGtCQUFhLEdBQUc7b0JBQzlCLG1DQUFtQyxFQUFFO3dCQUNuQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZO3dCQUN6QyxhQUFhLEVBQUU7NEJBQ2IsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGFBQWEsSUFBSSwrQ0FBc0I7eUJBQ2pFO3FCQUNGO29CQUNELGVBQWUsRUFBRSxrQkFBa0IsQ0FBQyxnQkFBZ0I7aUJBQ3JELENBQUM7WUFVSixDQUFDO1lBUlEsd0JBQXdCO2dCQUM3QixPQUFPO29CQUNMLElBQUkseUJBQWUsQ0FBQzt3QkFDbEIsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7d0JBQ2hDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDO3FCQUM3QyxDQUFDO2lCQUNILENBQUM7WUFDSixDQUFDO1NBQ0Y7UUFFRCxPQUFPLElBQUksNkJBQTZCLEVBQUUsQ0FBQztJQUM3QyxDQUFDOztBQW5DSCx3Q0EyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDZm5EYXRhU291cmNlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWJlZHJvY2snO1xuaW1wb3J0IHsgUG9saWN5U3RhdGVtZW50IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBERUZBVUxUX1BBUlNJTkdfUFJPTVBUIH0gZnJvbSAnLi9kZWZhdWx0LXBhcnNpbmctcHJvbXB0JztcbmltcG9ydCB7IElJbnZva2FibGUgfSBmcm9tICcuLi9tb2RlbHMnO1xuXG5leHBvcnQgZW51bSBQYXJzaW5nTW9kYWxpdHkge1xuICAvKipcbiAgICogU3BlY2lmaWVzIHdoZXRoZXIgdG8gZW5hYmxlIHBhcnNpbmcgb2YgbXVsdGltb2RhbCBkYXRhLCBpbmNsdWRpbmcgYm90aCB0ZXh0IGFuZC9vciBpbWFnZXMuXG4gICAqL1xuICBNVUxUSU1PREFMID0gJ01VTFRJTU9EQUwnLFxufVxuLyoqXG4gKiBFbnVtIHJlcHJlc2VudGluZyB0aGUgdHlwZXMgb2YgcGFyc2luZyBzdHJhdGVnaWVzIGF2YWlsYWJsZSBmb3IgQW1hem9uIEJlZHJvY2sgS25vd2xlZGdlIEJhc2VzLlxuICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYmVkcm9jay9sYXRlc3QvdXNlcmd1aWRlL2tiLWFkdmFuY2VkLXBhcnNpbmcuaHRtbFxuICovXG5leHBvcnQgZW51bSBQYXJzaW5nU3RhdGVneVR5cGUge1xuICAvKipcbiAgICogVXNlcyBhIEJlZHJvY2sgRm91bmRhdGlvbiBNb2RlbCBmb3IgYWR2YW5jZWQgcGFyc2luZyBvZiBub24tdGV4dHVhbCBpbmZvcm1hdGlvbiBmcm9tIGRvY3VtZW50cy5cbiAgICovXG4gIEZPVU5EQVRJT05fTU9ERUwgPSAnQkVEUk9DS19GT1VOREFUSU9OX01PREVMJyxcbiAgLyoqXG4gICAqIFByb2Nlc3NlcyBtdWx0aW1vZGFsIGRhdGEgdXNpbmcgQmVkcm9jayBEYXRhIEF1dG9tYXRpb24gKEJEQSkuIEl0IGxldmVyYWdlc1xuICAgKiBnZW5lcmF0aXZlIEFJIHRvIGF1dG9tYXRlIHRoZSB0cmFuc2Zvcm1hdGlvbiBvZiBtdWx0aS1tb2RhbCBkYXRhIGludG8gc3RydWN0dXJlZCBmb3JtYXRzLlxuICAgKiBJZiB5b3UgY2hvb3NlIGEgZm91bmRhdGlvbiBtb2RlbCBvciBBbWF6b24gQmVkcm9jayBEYXRhIEF1dG9tYXRpb24gZm9yIHBhcnNpbmcgYW5kIGl0IGZhaWxzXG4gICAqIHRvIHBhcnNlIGEgZmlsZSwgdGhlIEFtYXpvbiBCZWRyb2NrIGRlZmF1bHQgcGFyc2VyIGlzIHVzZWQgaW5zdGVhZC5cbiAgICovXG4gIERBVEFfQVVUT01BVElPTiA9ICdCRURST0NLX0RBVEFfQVVUT01BVElPTicsXG59XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgY29uZmlndXJpbmcgYSBGb3VuZGF0aW9uIE1vZGVsIHBhcnNpbmcgc3RyYXRlZ3kuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm91bmRhdGlvbk1vZGVsUGFyc2luZ1N0YXRlZ3lQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgRm91bmRhdGlvbiBNb2RlbCB0byB1c2UgZm9yIHBhcnNpbmcgbm9uLXRleHR1YWwgaW5mb3JtYXRpb24uXG4gICAqIEN1cnJlbnRseSBzdXBwb3J0ZWQgbW9kZWxzIGFyZSBDbGF1ZGUgMyBTb25uZXQgYW5kIENsYXVkZSAzIEhhaWt1LlxuICAgKi9cbiAgcmVhZG9ubHkgcGFyc2luZ01vZGVsOiBJSW52b2thYmxlO1xuXG4gIC8qKlxuICAgKiBDdXN0b20gcHJvbXB0IHRvIGluc3RydWN0IHRoZSBwYXJzZXIgb24gaG93IHRvIGludGVycHJldCB0aGUgZG9jdW1lbnQuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gVXNlcyB0aGUgZGVmYXVsdCBpbnN0cnVjdGlvbiBwcm9tcHQgYXMgcHJvdmlkZWQgaW4gdGhlIEFXUyBDb25zb2xlLlxuICAgKi9cbiAgcmVhZG9ubHkgcGFyc2luZ1Byb21wdD86IHN0cmluZztcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHdoZXRoZXIgdG8gZW5hYmxlIHBhcnNpbmcgb2YgbXVsdGltb2RhbCBkYXRhLCBpbmNsdWRpbmcgYm90aCB0ZXh0IGFuZC9vciBpbWFnZXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZCAtIFRleHQgb25seVxuICAgKi9cbiAgcmVhZG9ubHkgcGFyc2luZ01vZGFsaXR5PzogUGFyc2luZ01vZGFsaXR5O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYWR2YW5jZWQgcGFyc2luZyBzdHJhdGVneSBjb25maWd1cmF0aW9uIGZvciBLbm93bGVkZ2UgQmFzZSBpbmdlc3Rpb24uXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9iZWRyb2NrL2xhdGVzdC91c2VyZ3VpZGUva2ItY2h1bmtpbmctcGFyc2luZy5odG1sI2tiLWFkdmFuY2VkLXBhcnNpbmdcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBhcnNpbmdTdGF0ZWd5IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEZNIFBhcnNpbmcgU3RyYXRlZ3lcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRm91bmRhdGlvbiBNb2RlbC1iYXNlZCBwYXJzaW5nIHN0cmF0ZWd5IGZvciBleHRyYWN0aW5nIG5vbi10ZXh0dWFsIGluZm9ybWF0aW9uXG4gICAqIGZyb20gZG9jdW1lbnRzIHN1Y2ggYXMgdGFibGVzIGFuZCBjaGFydHMuXG4gICAqIC0gQWRkaXRpb25hbCBjb3N0cyBhcHBseSB3aGVuIHVzaW5nIGFkdmFuY2VkIHBhcnNpbmcgZHVlIHRvIGZvdW5kYXRpb24gbW9kZWwgdXNhZ2UuXG4gICAqIC0gVGhlcmUgYXJlIGxpbWl0cyBvbiBmaWxlIHR5cGVzIChQREYpIGFuZCB0b3RhbCBkYXRhIHRoYXQgY2FuIGJlIHBhcnNlZCB1c2luZyBhZHZhbmNlZCBwYXJzaW5nLlxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9iZWRyb2NrL2xhdGVzdC91c2VyZ3VpZGUva25vd2xlZGdlLWJhc2UtZHMuaHRtbCNrYi1kcy1zdXBwb3J0ZWQtZG9jLWZvcm1hdHMtbGltaXRzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZvdW5kYXRpb25Nb2RlbChwcm9wczogRm91bmRhdGlvbk1vZGVsUGFyc2luZ1N0YXRlZ3lQcm9wcyk6IFBhcnNpbmdTdGF0ZWd5IHtcbiAgICBjbGFzcyBGb3VuZGF0aW9uTW9kZWxUcmFuc2Zvcm1hdGlvbiBleHRlbmRzIFBhcnNpbmdTdGF0ZWd5IHtcbiAgICAgIC8qKiBUaGUgQ2xvdWRGb3JtYXRpb24gcHJvcGVydHkgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBjb25maWd1cmF0aW9uICovXG4gICAgICBwdWJsaWMgcmVhZG9ubHkgY29uZmlndXJhdGlvbiA9IHtcbiAgICAgICAgYmVkcm9ja0ZvdW5kYXRpb25Nb2RlbENvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICBtb2RlbEFybjogcHJvcHMucGFyc2luZ01vZGVsLmludm9rYWJsZUFybixcbiAgICAgICAgICBwYXJzaW5nUHJvbXB0OiB7XG4gICAgICAgICAgICBwYXJzaW5nUHJvbXB0VGV4dDogcHJvcHMucGFyc2luZ1Byb21wdCA/PyBERUZBVUxUX1BBUlNJTkdfUFJPTVBULFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHBhcnNpbmdTdHJhdGVneTogUGFyc2luZ1N0YXRlZ3lUeXBlLkZPVU5EQVRJT05fTU9ERUwsXG4gICAgICB9O1xuXG4gICAgICBwdWJsaWMgZ2VuZXJhdGVQb2xpY3lTdGF0ZW1lbnRzKCk6IFBvbGljeVN0YXRlbWVudFtdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBuZXcgUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICAgIGFjdGlvbnM6IFsnYmVkcm9jazpJbnZva2VNb2RlbCddLFxuICAgICAgICAgICAgcmVzb3VyY2VzOiBbcHJvcHMucGFyc2luZ01vZGVsLmludm9rYWJsZUFybl0sXG4gICAgICAgICAgfSksXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBGb3VuZGF0aW9uTW9kZWxUcmFuc2Zvcm1hdGlvbigpO1xuICB9XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBQcm9wZXJ0aWVzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKiogVGhlIENsb3VkRm9ybWF0aW9uIHByb3BlcnR5IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgY29uZmlndXJhdGlvbiAqL1xuICBwdWJsaWMgYWJzdHJhY3QgY29uZmlndXJhdGlvbjogQ2ZuRGF0YVNvdXJjZS5QYXJzaW5nQ29uZmlndXJhdGlvblByb3BlcnR5O1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBnZW5lcmF0ZVBvbGljeVN0YXRlbWVudHMoKTogUG9saWN5U3RhdGVtZW50W107XG59XG4iXX0=