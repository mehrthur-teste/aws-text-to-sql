"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorKnowledgeBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const nag_suppressions_1 = require("cdk-nag/lib/nag-suppressions");
const knowledge_base_1 = require("./knowledge-base");
const utils_1 = require("../../../common/helpers/utils");
const amazonaurora_1 = require("../../amazonaurora");
const opensearch_vectorindex_1 = require("../../opensearch-vectorindex");
const opensearchserverless_1 = require("../../opensearchserverless");
const pinecone_1 = require("../../pinecone");
const confluence_data_source_1 = require("../data-sources/confluence-data-source");
const s3_data_source_1 = require("../data-sources/s3-data-source");
const salesforce_data_source_1 = require("../data-sources/salesforce-data-source");
const sharepoint_data_source_1 = require("../data-sources/sharepoint-data-source");
const web_crawler_data_source_1 = require("../data-sources/web-crawler-data-source");
const models_1 = require("../models");
/******************************************************************************
 *                                  ENUMS
 *****************************************************************************/
/**
 * Knowledge base can be backed by different vector databases.
 * This enum represents the different vector databases that can be used.
 *
 * `OPENSEARCH_SERVERLESS` is the default vector database.
 * `REDIS_ENTERPRISE_CLOUD` is the vector database for Redis Enterprise Cloud.
 * `PINECONE` is the vector database for Pinecone.
 * `AMAZON_AURORA` is the vector database for Amazon Aurora PostgreSQL.
 */
var VectorStoreType;
(function (VectorStoreType) {
    /**
     * `OPENSEARCH_SERVERLESS` is the vector store for OpenSearch Serverless.
     */
    VectorStoreType["OPENSEARCH_SERVERLESS"] = "OPENSEARCH_SERVERLESS";
    /**
     * `PINECONE` is the vector store for Pinecone.
     */
    VectorStoreType["PINECONE"] = "PINECONE";
    /**
     * `RDS` is the vector store for Amazon Aurora.
     */
    VectorStoreType["AMAZON_AURORA"] = "RDS";
})(VectorStoreType || (VectorStoreType = {}));
/******************************************************************************
 *                              ABSTRACT CLASS
 *****************************************************************************/
/**
 * Abstract base class for Vector Knowledge Base.
 * Contains methods valid for KBs either created with CDK or imported.
 */
class VectorKnowledgeBaseBase extends knowledge_base_1.KnowledgeBaseBase {
    constructor(scope, id) {
        super(scope, id);
        this.type = knowledge_base_1.KnowledgeBaseType.VECTOR;
    }
    // ------------------------------------------------------
    // Helper methods to add Data Sources
    // ------------------------------------------------------
    addS3DataSource(props) {
        return new s3_data_source_1.S3DataSource(this, `s3-${props.bucket.node.addr}`, {
            knowledgeBase: this,
            ...props,
        });
    }
    addWebCrawlerDataSource(props) {
        const url = new URL(props.sourceUrls[0]);
        return new web_crawler_data_source_1.WebCrawlerDataSource(this, `web-${url.hostname.replace('.', '-')}`, {
            knowledgeBase: this,
            ...props,
        });
    }
    addSharePointDataSource(props) {
        const url = new URL(props.siteUrls[0]);
        return new sharepoint_data_source_1.SharePointDataSource(this, `sp-${url.hostname.replace('.', '-')}`, {
            knowledgeBase: this,
            ...props,
        });
    }
    addConfluenceDataSource(props) {
        const url = new URL(props.confluenceUrl);
        return new confluence_data_source_1.ConfluenceDataSource(this, `cf-${url.hostname.replace('.', '-')}`, {
            knowledgeBase: this,
            ...props,
        });
    }
    addSalesforceDataSource(props) {
        const url = new URL(props.endpoint);
        return new salesforce_data_source_1.SalesforceDataSource(this, `sf-${url.hostname.replace('.', '-')}`, {
            knowledgeBase: this,
            ...props,
        });
    }
}
/**
 * Deploys a Bedrock Knowledge Base and configures a backend by OpenSearch Serverless,
 * Pinecone, Redis Enterprise Cloud or Amazon Aurora PostgreSQL.
 *
 */
class VectorKnowledgeBase extends VectorKnowledgeBaseBase {
    // ------------------------------------------------------
    // Import Methods
    // ------------------------------------------------------
    static fromKnowledgeBaseAttributes(scope, id, attrs) {
        const stack = aws_cdk_lib_1.Stack.of(scope);
        class Import extends VectorKnowledgeBaseBase {
            constructor() {
                super(...arguments);
                this.role = iam.Role.fromRoleArn(this, `kb-${attrs.knowledgeBaseId}-role`, attrs.executionRoleArn);
                this.description = attrs.description;
                this.instruction = attrs.instruction;
                this.knowledgeBaseId = attrs.knowledgeBaseId;
                this.knowledgeBaseArn = stack.formatArn({
                    service: 'bedrock',
                    resource: 'knowledge-base',
                    resourceName: attrs.knowledgeBaseId,
                    arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                });
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        const embeddingsModel = props.embeddingsModel;
        const vectorType = props.vectorType ?? models_1.VectorType.FLOATING_POINT;
        const indexName = props.indexName ?? 'bedrock-knowledge-base-default-index';
        const vectorField = props.vectorField ?? 'bedrock-knowledge-base-default-vector';
        const textField = 'AMAZON_BEDROCK_TEXT_CHUNK';
        const metadataField = 'AMAZON_BEDROCK_METADATA';
        this.description = props.description ?? 'CDK deployed Knowledge base'; // even though this prop is optional, if no value is provided it will fail to deploy
        //this.knowledgeBaseState = props.knowledgeBaseState ?? 'ENABLED';
        this.instruction = props.instruction;
        validateModel(embeddingsModel, vectorType);
        validateVectorIndex(props.vectorStore, props.vectorIndex, props.vectorField, props.indexName);
        if (props.vectorIndex) {
            validateIndexParameters(props.vectorIndex, indexName, vectorField);
        }
        this.name = props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'KB', { maxLength: 32 });
        if (props.existingRole) {
            this.role = props.existingRole;
        }
        else {
            const roleName = (0, utils_1.generatePhysicalNameV2)(this, 'AmazonBedrockExecutionRoleForKnowledgeBase', { maxLength: 64 });
            this.role = new iam.Role(this, 'Role', {
                roleName: roleName,
                assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com', {
                    conditions: {
                        StringEquals: { 'aws:SourceAccount': aws_cdk_lib_1.Stack.of(this).account },
                        ArnLike: {
                            'aws:SourceArn': aws_cdk_lib_1.Stack.of(this).formatArn({
                                service: 'bedrock',
                                resource: 'knowledge-base',
                                resourceName: '*',
                                arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                            }),
                        },
                    },
                }),
            });
            this.role.addToPrincipalPolicy(new iam.PolicyStatement({
                actions: ['bedrock:InvokeModel'],
                resources: [embeddingsModel.asArn(this)],
            }));
        }
        /**
         * Create the vector store if the vector store was provided by the user.
         * Otherwise check againts all possible vector datastores.
         * If none was provided create default OpenSearch Serverless Collection.
         */
        if (props.vectorStore instanceof opensearchserverless_1.VectorCollection) {
            ({ vectorStore: this.vectorStore, vectorStoreType: this.vectorStoreType } =
                this.handleOpenSearchCollection(props));
        }
        else if (props.vectorStore instanceof pinecone_1.PineconeVectorStore) {
            ({ vectorStore: this.vectorStore, vectorStoreType: this.vectorStoreType } =
                this.handlePineconeVectorStore(props));
        }
        else if (props.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
            props.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore) {
            ({ vectorStore: this.vectorStore, vectorStoreType: this.vectorStoreType } =
                this.handleAmazonAuroraVectorStore(props));
        }
        else {
            ({ vectorStore: this.vectorStore, vectorStoreType: this.vectorStoreType } =
                this.handleOpenSearchDefaultVectorCollection());
        }
        // perform this validation after the vector store is handled since if the user
        // doesn't provide one, the method above will create it
        validateVectorType(this.vectorStore, vectorType);
        /**
         * We need to add `secretsmanager:GetSecretValue` to the role
         * of the knowledge base if we use data sources
         * other than OpenSearch Serverless.
         */
        if (!(this.vectorStore instanceof opensearchserverless_1.VectorCollection)) {
            this.role.addToPrincipalPolicy(new iam.PolicyStatement({
                actions: ['secretsmanager:GetSecretValue'],
                resources: [this.vectorStore.credentialsSecretArn],
            }));
        }
        /**
         * We need to add `rds-data:ExecuteStatement`,
         * `rds-data:BatchExecuteStatement` and
         * `rds:DescribeDBClusters` to the role
         * of the knowledge base if we use Amazon Aurora as
         * a data source.
         */
        if (this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
            this.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore) {
            this.role.addToPrincipalPolicy(new iam.PolicyStatement({
                actions: ['rds-data:ExecuteStatement', 'rds-data:BatchExecuteStatement', 'rds:DescribeDBClusters'],
                resources: [this.vectorStore.resourceArn],
            }));
        }
        /**
         * Create the vector index if the vector store is OpenSearch Serverless
         * and it was not provided. Otherwise use the provided vector index.
         */
        if (this.vectorStoreType === VectorStoreType.OPENSEARCH_SERVERLESS) {
            if (!props.vectorIndex) {
                this.vectorIndex = new opensearch_vectorindex_1.VectorIndex(this, 'KBIndex', {
                    collection: this.vectorStore,
                    indexName,
                    vectorField,
                    vectorDimensions: embeddingsModel.vectorDimensions,
                    precision: props.vectorType === models_1.VectorType.BINARY ? 'Binary' : 'float',
                    distanceType: props.vectorType === models_1.VectorType.BINARY ? 'hamming' : 'l2',
                    mappings: [
                        {
                            mappingField: 'AMAZON_BEDROCK_TEXT_CHUNK',
                            dataType: 'text',
                            filterable: true,
                        },
                        {
                            mappingField: 'AMAZON_BEDROCK_METADATA',
                            dataType: 'text',
                            filterable: false,
                        },
                    ],
                });
                this.vectorIndex.node.addDependency(this.vectorStore);
            }
            else {
                this.vectorIndex = props.vectorIndex;
            }
        }
        /**
         * Create storage configuraion. If it is of type of
         * `AmazonAuroraVectorStore` or `ExistingAmazonAuroraVectorStore`,
         * then get textField, metadataField and vectorField from
         * the arguments. Otherwise use default values.
         */
        const storageConfiguration = {
            indexName: indexName,
            vectorStore: this.vectorStore,
            vectorStoreType: this.vectorStoreType,
            vectorField: this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
                this.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore
                ? this.vectorStore.vectorField
                : vectorField,
            textField: this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
                this.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore ||
                this.vectorStore instanceof pinecone_1.PineconeVectorStore
                ? this.vectorStore.textField
                : textField,
            metadataField: this.vectorStore instanceof amazonaurora_1.AmazonAuroraVectorStore ||
                this.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore ||
                this.vectorStore instanceof pinecone_1.PineconeVectorStore
                ? this.vectorStore.metadataField
                : metadataField,
        };
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        const knowledgeBase = new aws_cdk_lib_1.aws_bedrock.CfnKnowledgeBase(this, 'MyCfnKnowledgeBase', {
            knowledgeBaseConfiguration: {
                type: knowledge_base_1.KnowledgeBaseType.VECTOR,
                vectorKnowledgeBaseConfiguration: {
                    embeddingModelArn: embeddingsModel.asArn(this),
                    // Used this approach as if property is specified on models that do not
                    // support configurable dimensions CloudFormation throws an error at runtime
                    embeddingModelConfiguration: {
                        bedrockEmbeddingModelConfiguration: embeddingsModel.modelId === 'amazon.titan-embed-text-v2:0'
                            ? {
                                dimensions: embeddingsModel.vectorDimensions,
                                embeddingDataType: vectorType,
                            }
                            : { embeddingDataType: vectorType },
                    },
                },
            },
            name: this.name,
            roleArn: this.role.roleArn,
            storageConfiguration: getStorageConfiguration(storageConfiguration),
            description: props.description,
        });
        this.knowledgeBaseInstance = knowledgeBase;
        const kbCRPolicy = new iam.Policy(this, 'KBCRPolicy', {
            // roles: [crProvider.role],
            roles: [this.role],
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        'bedrock:CreateKnowledgeBase',
                        /**
                         * We need to add `bedrock:AssociateThirdPartyKnowledgeBase` if
                         * we are deploying Redis or Pinecone data sources
                         */
                        //...(this.vectorStoreType === VectorStoreType.REDIS_ENTERPRISE_CLOUD ||
                        ...(this.vectorStoreType === VectorStoreType.PINECONE ? ['bedrock:AssociateThirdPartyKnowledgeBase'] : []),
                    ],
                    resources: ['*'],
                }),
                new iam.PolicyStatement({
                    actions: ['bedrock:UpdateKnowledgeBase', 'bedrock:DeleteKnowledgeBase', 'bedrock:TagResource'],
                    resources: [
                        aws_cdk_lib_1.Stack.of(this).formatArn({
                            service: 'bedrock',
                            resource: 'knowledge-base',
                            resourceName: '*',
                            arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                        }),
                    ],
                }),
                new iam.PolicyStatement({
                    actions: ['iam:PassRole'],
                    resources: [this.role.roleArn],
                }),
            ],
        });
        knowledgeBase.node.addDependency(this.role);
        knowledgeBase.node.addDependency(kbCRPolicy);
        if (this.vectorStoreType === VectorStoreType.OPENSEARCH_SERVERLESS && this.vectorIndex) {
            knowledgeBase.node.addDependency(this.vectorIndex);
        }
        if (this.vectorStoreType === VectorStoreType.AMAZON_AURORA) {
            knowledgeBase.node.addDependency(this.vectorStore);
        }
        nag_suppressions_1.NagSuppressions.addResourceSuppressions(kbCRPolicy, [
            {
                id: 'AwsSolutions-IAM5',
                reason: "Bedrock CreateKnowledgeBase can't be restricted by resource.",
            },
        ], true);
        this.knowledgeBaseArn = knowledgeBase.attrKnowledgeBaseArn;
        this.knowledgeBaseId = knowledgeBase.attrKnowledgeBaseId;
    }
    /**
     * Handle VectorCollection type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of VectorCollection, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleOpenSearchCollection(props) {
        const vectorStore = props.vectorStore;
        vectorStore.grantDataAccess(this.role);
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.OPENSEARCH_SERVERLESS,
        };
    }
    /**
     * Handle PineconeVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of PineconeVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handlePineconeVectorStore(props) {
        const vectorStore = props.vectorStore;
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.PINECONE,
        };
    }
    /**
     * Handle AmazonAuroraVectorStore type of VectorStore.
     *
     * @param props - The properties of the KnowledgeBase.
     * @returns The instance of AmazonAuroraVectorStore, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleAmazonAuroraVectorStore(props) {
        const vectorStore = props.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore
            ? props.vectorStore
            : props.vectorStore;
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.AMAZON_AURORA,
        };
    }
    /**
     * Handle the default VectorStore type.
     *
     * @returns The instance of VectorCollection, VectorStoreType.
     * @internal This is an internal core function and should not be called directly.
     */
    handleOpenSearchDefaultVectorCollection() {
        const vectorStore = new opensearchserverless_1.VectorCollection(this, 'KBVectors');
        vectorStore.grantDataAccess(this.role);
        return {
            vectorStore: vectorStore,
            vectorStoreType: VectorStoreType.OPENSEARCH_SERVERLESS,
        };
    }
    /**
     * Associate knowledge base with an agent
     */
    associateToAgent(agent) {
        agent.addKnowledgeBase(this);
    }
}
exports.VectorKnowledgeBase = VectorKnowledgeBase;
_a = JSII_RTTI_SYMBOL_1;
VectorKnowledgeBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.VectorKnowledgeBase", version: "0.1.293" };
/**
 * Validate that Bedrock Knowledge Base can use the selected model.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateModel(foundationModel, vectorType) {
    if (!foundationModel.supportsKnowledgeBase) {
        throw new Error(`The model ${foundationModel} is not supported by Bedrock Knowledge Base.`);
    }
    if (foundationModel.supportedVectorType && !foundationModel.supportedVectorType.includes(vectorType)) {
        throw new Error(`The vector type ${vectorType} is not supported by the model ${foundationModel}.`);
    }
}
/**
 * Validate that the storage configuration can use the selected vector type.
 * It prevents the use of vector types with vector stores that do not support them,
 * thereby avoiding potential runtime errors.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateVectorType(vectorStore, vectorType) {
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && (vectorType == models_1.VectorType.BINARY)) {
        console.log(vectorStore);
        throw new Error('Amazon OpenSearch Serverless is currently the only vector store that supports storing binary vectors.');
    }
}
/**
 * Validate if VectorIndex was provided for a VectorStore of type
 * other than `VectorCollection`.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateVectorIndex(vectorStore, vectorIndex, vectorField, indexName) {
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && vectorIndex) {
        throw new Error('If vectorStore is not of type VectorCollection, vectorIndex should not be provided ' +
            'in KnowledgeBase construct.');
    }
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && indexName) {
        throw new Error('If vectorStore is not of type VectorCollection, indexName should not be provided ' +
            'in KnowledgeBase construct.');
    }
    if (!(vectorStore instanceof opensearchserverless_1.VectorCollection) && vectorField) {
        throw new Error('If vectorStore is not of type VectorCollection, vectorField should not be provided ' +
            'in KnowledgeBase construct.');
    }
}
/**
 * Validate that indexName and vectorField parameters are identical
 * in KnowledgeBase construct if VectorIndex was created manually.
 *
 * By default we assign `vectorIndex` to `bedrock-knowledge-base-default-index`
 * value and if user provides `vectorIndex` manually, we need to make sure
 * they also provide it in KnowledgeBase construct if the value is not
 * `bedrock-knowledge-base-default-index`. Same for vectorField.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function validateIndexParameters(vectorIndex, indexName, vectorField) {
    if (vectorIndex.indexName !== 'bedrock-knowledge-base-default-index') {
        if (vectorIndex.indexName !== indexName) {
            throw new Error('Default value of indexName is `bedrock-knowledge-base-default-index`.' +
                ' If you create VectorIndex manually and assign vectorIndex to value other than' +
                ' `bedrock-knowledge-base-default-index` then you must provide the same value in KnowledgeBase construct.' +
                ' If you created VectorIndex manually and set it to `bedrock-knowledge-base-default-index`' +
                ' then do not assign indexName in KnowledgeBase construct.');
        }
    }
    if (vectorIndex.vectorField !== 'bedrock-knowledge-base-default-vector') {
        if (vectorIndex.vectorField !== vectorField) {
            throw new Error('Default value of vectorField is `bedrock-knowledge-base-default-vector`.' +
                ' If you create VectorIndex manually and assign vectorField to value other than' +
                ' `bedrock-knowledge-base-default-field` then you must provide the same value in KnowledgeBase construct.' +
                ' If you created VectorIndex manually and set it to `bedrock-knowledge-base-default-vector`' +
                ' then do not assign vectorField in KnowledgeBase construct.');
        }
    }
}
/**
 * Determine storage configuration based on vector store type.
 *
 * @internal This is an internal core function and should not be called directly.
 */
function getStorageConfiguration(params) {
    switch (params.vectorStoreType) {
        case VectorStoreType.OPENSEARCH_SERVERLESS:
            params.vectorStore = params.vectorStore;
            return {
                type: VectorStoreType.OPENSEARCH_SERVERLESS,
                opensearchServerlessConfiguration: {
                    collectionArn: params.vectorStore.collectionArn,
                    fieldMapping: {
                        vectorField: params.vectorField,
                        textField: params.textField,
                        metadataField: params.metadataField,
                    },
                    vectorIndexName: params.indexName,
                },
            };
        case VectorStoreType.PINECONE:
            params.vectorStore = params.vectorStore;
            return {
                type: VectorStoreType.PINECONE,
                pineconeConfiguration: {
                    namespace: params.vectorStore.namespace || undefined,
                    connectionString: params.vectorStore.connectionString,
                    credentialsSecretArn: params.vectorStore.credentialsSecretArn,
                    fieldMapping: {
                        textField: params.textField,
                        metadataField: params.metadataField,
                    },
                },
            };
        case VectorStoreType.AMAZON_AURORA:
            params.vectorStore =
                params.vectorStore instanceof amazonaurora_1.ExistingAmazonAuroraVectorStore
                    ? params.vectorStore
                    : params.vectorStore;
            return {
                type: VectorStoreType.AMAZON_AURORA,
                rdsConfiguration: {
                    credentialsSecretArn: params.vectorStore.credentialsSecretArn,
                    databaseName: params.vectorStore.databaseName,
                    resourceArn: params.vectorStore.resourceArn,
                    tableName: `${params.vectorStore.schemaName}.${params.vectorStore.tableName}`,
                    fieldMapping: {
                        vectorField: params.vectorField.replace(/-/g, '_'),
                        primaryKeyField: params.vectorStore.primaryKeyField,
                        textField: params.textField.toLowerCase(),
                        metadataField: params.metadataField.toLowerCase(),
                    },
                },
            };
        default:
            throw new Error(`Unsupported vector store type: ${params.vectorStoreType}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVjdG9yLWtub3dsZWRnZS1iYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9rbm93bGVkZ2UtYmFzZXMvdmVjdG9yLWtub3dsZWRnZS1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCw2Q0FBdUU7QUFDdkUsMkNBQTJDO0FBQzNDLG1FQUErRDtBQUUvRCxxREFNMEI7QUFDMUIseURBQXVFO0FBQ3ZFLHFEQUE4RjtBQUM5Rix5RUFBMkQ7QUFDM0QscUVBQThEO0FBQzlELDZDQUFxRDtBQUVyRCxtRkFBb0g7QUFDcEgsbUVBQTRGO0FBQzVGLG1GQUFvSDtBQUNwSCxtRkFBb0g7QUFDcEgscUZBQXFIO0FBQ3JILHNDQUErRDtBQUUvRDs7K0VBRStFO0FBQy9FOzs7Ozs7OztHQVFHO0FBQ0gsSUFBSyxlQWFKO0FBYkQsV0FBSyxlQUFlO0lBQ2xCOztPQUVHO0lBQ0gsa0VBQStDLENBQUE7SUFDL0M7O09BRUc7SUFDSCx3Q0FBcUIsQ0FBQTtJQUNyQjs7T0FFRztJQUNILHdDQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFiSSxlQUFlLEtBQWYsZUFBZSxRQWFuQjtBQWlGRDs7K0VBRStFO0FBQy9FOzs7R0FHRztBQUNILE1BQWUsdUJBQXdCLFNBQVEsa0NBQWlCO0lBUzlELFlBQVksS0FBZ0IsRUFBRSxFQUFVO1FBQ3RDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFISCxTQUFJLEdBQXNCLGtDQUFpQixDQUFDLE1BQU0sQ0FBQztJQUluRSxDQUFDO0lBRUQseURBQXlEO0lBQ3pELHFDQUFxQztJQUNyQyx5REFBeUQ7SUFDbEQsZUFBZSxDQUFDLEtBQW1DO1FBQ3hELE9BQU8sSUFBSSw2QkFBWSxDQUFDLElBQUksRUFBRSxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFO1lB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QkFDM0IsYUFBYSxFQUFFLE1BQU0sQ0FBQyxhQUFhO3FCQUNwQztpQkFDRjthQUNGLENBQUM7UUFDSixLQUFLLGVBQWUsQ0FBQyxhQUFhO1lBQ2hDLE1BQU0sQ0FBQyxXQUFXO2dCQUNoQixNQUFNLENBQUMsV0FBVyxZQUFZLDhDQUErQjtvQkFDM0QsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXO29CQUNwQixDQUFDLENBQUUsTUFBTSxDQUFDLFdBQXVDLENBQUM7WUFDdEQsT0FBTztnQkFDTCxJQUFJLEVBQUUsZUFBZSxDQUFDLGFBQWE7Z0JBQ25DLGdCQUFnQixFQUFFO29CQUNoQixvQkFBb0IsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLG9CQUFvQjtvQkFDN0QsWUFBWSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsWUFBWTtvQkFDN0MsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVztvQkFDM0MsU0FBUyxFQUFFLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUU7b0JBQzdFLFlBQVksRUFBRTt3QkFDWixXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQzt3QkFDbEQsZUFBZSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBZTt3QkFDbkQsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFO3dCQUN6QyxhQUFhLEVBQUUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUU7cUJBQ2xEO2lCQUNGO2FBQ0YsQ0FBQztRQUNKO1lBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7SUFDaEYsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBBcm5Gb3JtYXQsIGF3c19iZWRyb2NrIGFzIGJlZHJvY2ssIFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0IHsgTmFnU3VwcHJlc3Npb25zIH0gZnJvbSAnY2RrLW5hZy9saWIvbmFnLXN1cHByZXNzaW9ucyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7XG4gIENvbW1vbktub3dsZWRnZUJhc2VBdHRyaWJ1dGVzLFxuICBDb21tb25Lbm93bGVkZ2VCYXNlUHJvcHMsXG4gIElLbm93bGVkZ2VCYXNlLFxuICBLbm93bGVkZ2VCYXNlQmFzZSxcbiAgS25vd2xlZGdlQmFzZVR5cGUsXG59IGZyb20gJy4va25vd2xlZGdlLWJhc2UnO1xuaW1wb3J0IHsgZ2VuZXJhdGVQaHlzaWNhbE5hbWVWMiB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9oZWxwZXJzL3V0aWxzJztcbmltcG9ydCB7IEV4aXN0aW5nQW1hem9uQXVyb3JhVmVjdG9yU3RvcmUsIEFtYXpvbkF1cm9yYVZlY3RvclN0b3JlIH0gZnJvbSAnLi4vLi4vYW1hem9uYXVyb3JhJztcbmltcG9ydCB7IFZlY3RvckluZGV4IH0gZnJvbSAnLi4vLi4vb3BlbnNlYXJjaC12ZWN0b3JpbmRleCc7XG5pbXBvcnQgeyBWZWN0b3JDb2xsZWN0aW9uIH0gZnJvbSAnLi4vLi4vb3BlbnNlYXJjaHNlcnZlcmxlc3MnO1xuaW1wb3J0IHsgUGluZWNvbmVWZWN0b3JTdG9yZSB9IGZyb20gJy4uLy4uL3BpbmVjb25lJztcbmltcG9ydCB7IEFnZW50IH0gZnJvbSAnLi4vYWdlbnRzL2FnZW50JztcbmltcG9ydCB7IENvbmZsdWVuY2VEYXRhU291cmNlLCBDb25mbHVlbmNlRGF0YVNvdXJjZUFzc29jaWF0aW9uUHJvcHMgfSBmcm9tICcuLi9kYXRhLXNvdXJjZXMvY29uZmx1ZW5jZS1kYXRhLXNvdXJjZSc7XG5pbXBvcnQgeyBTM0RhdGFTb3VyY2UsIFMzRGF0YVNvdXJjZUFzc29jaWF0aW9uUHJvcHMgfSBmcm9tICcuLi9kYXRhLXNvdXJjZXMvczMtZGF0YS1zb3VyY2UnO1xuaW1wb3J0IHsgU2FsZXNmb3JjZURhdGFTb3VyY2UsIFNhbGVzZm9yY2VEYXRhU291cmNlQXNzb2NpYXRpb25Qcm9wcyB9IGZyb20gJy4uL2RhdGEtc291cmNlcy9zYWxlc2ZvcmNlLWRhdGEtc291cmNlJztcbmltcG9ydCB7IFNoYXJlUG9pbnREYXRhU291cmNlLCBTaGFyZVBvaW50RGF0YVNvdXJjZUFzc29jaWF0aW9uUHJvcHMgfSBmcm9tICcuLi9kYXRhLXNvdXJjZXMvc2hhcmVwb2ludC1kYXRhLXNvdXJjZSc7XG5pbXBvcnQgeyBXZWJDcmF3bGVyRGF0YVNvdXJjZSwgV2ViQ3Jhd2xlckRhdGFTb3VyY2VBc3NvY2lhdGlvblByb3BzIH0gZnJvbSAnLi4vZGF0YS1zb3VyY2VzL3dlYi1jcmF3bGVyLWRhdGEtc291cmNlJztcbmltcG9ydCB7IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwsIFZlY3RvclR5cGUgfSBmcm9tICcuLi9tb2RlbHMnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFTlVNU1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqXG4gKiBLbm93bGVkZ2UgYmFzZSBjYW4gYmUgYmFja2VkIGJ5IGRpZmZlcmVudCB2ZWN0b3IgZGF0YWJhc2VzLlxuICogVGhpcyBlbnVtIHJlcHJlc2VudHMgdGhlIGRpZmZlcmVudCB2ZWN0b3IgZGF0YWJhc2VzIHRoYXQgY2FuIGJlIHVzZWQuXG4gKlxuICogYE9QRU5TRUFSQ0hfU0VSVkVSTEVTU2AgaXMgdGhlIGRlZmF1bHQgdmVjdG9yIGRhdGFiYXNlLlxuICogYFJFRElTX0VOVEVSUFJJU0VfQ0xPVURgIGlzIHRoZSB2ZWN0b3IgZGF0YWJhc2UgZm9yIFJlZGlzIEVudGVycHJpc2UgQ2xvdWQuXG4gKiBgUElORUNPTkVgIGlzIHRoZSB2ZWN0b3IgZGF0YWJhc2UgZm9yIFBpbmVjb25lLlxuICogYEFNQVpPTl9BVVJPUkFgIGlzIHRoZSB2ZWN0b3IgZGF0YWJhc2UgZm9yIEFtYXpvbiBBdXJvcmEgUG9zdGdyZVNRTC5cbiAqL1xuZW51bSBWZWN0b3JTdG9yZVR5cGUge1xuICAvKipcbiAgICogYE9QRU5TRUFSQ0hfU0VSVkVSTEVTU2AgaXMgdGhlIHZlY3RvciBzdG9yZSBmb3IgT3BlblNlYXJjaCBTZXJ2ZXJsZXNzLlxuICAgKi9cbiAgT1BFTlNFQVJDSF9TRVJWRVJMRVNTID0gJ09QRU5TRUFSQ0hfU0VSVkVSTEVTUycsXG4gIC8qKlxuICAgKiBgUElORUNPTkVgIGlzIHRoZSB2ZWN0b3Igc3RvcmUgZm9yIFBpbmVjb25lLlxuICAgKi9cbiAgUElORUNPTkUgPSAnUElORUNPTkUnLFxuICAvKipcbiAgICogYFJEU2AgaXMgdGhlIHZlY3RvciBzdG9yZSBmb3IgQW1hem9uIEF1cm9yYS5cbiAgICovXG4gIEFNQVpPTl9BVVJPUkEgPSAnUkRTJyxcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIENPTU1PTiBJTlRFUkZBQ0VTXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIEludGVyZmFjZSBmb3IgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIHN0b3JhZ2UgZm9yIGtub3dsZWRnZSBiYXNlLlxuICovXG5pbnRlcmZhY2UgU3RvcmFnZUNvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogVGhlIHZlY3RvciBzdG9yZSwgd2hpY2ggY2FuIGJlIG9mIGBWZWN0b3JDb2xsZWN0aW9uYCwgYFBpbmVjb25lVmVjdG9yU3RvcmVgIG9yXG4gICAqIGBBbWF6b25BdXJvcmFWZWN0b3JTdG9yZWAgdHlwZXMuXG4gICAqL1xuICB2ZWN0b3JTdG9yZTogVmVjdG9yQ29sbGVjdGlvbiB8IFBpbmVjb25lVmVjdG9yU3RvcmUgfCBBbWF6b25BdXJvcmFWZWN0b3JTdG9yZSB8IEV4aXN0aW5nQW1hem9uQXVyb3JhVmVjdG9yU3RvcmU7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSB2ZWN0b3Igc3RvcmUuXG4gICAqL1xuICB2ZWN0b3JTdG9yZVR5cGU6IFZlY3RvclN0b3JlVHlwZTtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGluZGV4LlxuICAgKi9cbiAgaW5kZXhOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBmaWVsZCBvZiB0aGUgdmVjdG9yIGZpZWxkIGZvciB2ZWN0b3IgbWFwcGluZy5cbiAgICovXG4gIHZlY3RvckZpZWxkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBmaWVsZCBvZiB0aGUgdGV4dCBmaWVsZCBmb3IgdmVjdG9yIG1hcHBpbmcuXG4gICAqL1xuICB0ZXh0RmllbGQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGZpZWxkIG9mIHRoZSBtZXRhZGF0YS5cbiAgICovXG4gIG1ldGFkYXRhRmllbGQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgS25vd2xlZGdlIEJhc2UsIGVpdGhlciBjcmVhdGVkIHdpdGggQ0RLIG9yIGltcG9ydGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElWZWN0b3JLbm93bGVkZ2VCYXNlIGV4dGVuZHMgSUtub3dsZWRnZUJhc2Uge1xuICAvKipcbiAgICogQWRkIGFuIFMzIGRhdGEgc291cmNlIHRvIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICovXG4gIGFkZFMzRGF0YVNvdXJjZShwcm9wczogUzNEYXRhU291cmNlQXNzb2NpYXRpb25Qcm9wcyk6IFMzRGF0YVNvdXJjZTtcblxuICAvKipcbiAgICogQWRkIGEgd2ViIGNyYXdsZXIgZGF0YSBzb3VyY2UgdG8gdGhlIGtub3dsZWRnZSBiYXNlLlxuICAgKi9cbiAgYWRkV2ViQ3Jhd2xlckRhdGFTb3VyY2UocHJvcHM6IFdlYkNyYXdsZXJEYXRhU291cmNlQXNzb2NpYXRpb25Qcm9wcyk6IFdlYkNyYXdsZXJEYXRhU291cmNlO1xuXG4gIC8qKlxuICAgKiBBZGQgYSBTaGFyZVBvaW50IGRhdGEgc291cmNlIHRvIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICovXG4gIGFkZFNoYXJlUG9pbnREYXRhU291cmNlKHByb3BzOiBTaGFyZVBvaW50RGF0YVNvdXJjZUFzc29jaWF0aW9uUHJvcHMpOiBTaGFyZVBvaW50RGF0YVNvdXJjZTtcblxuICAvKipcbiAgICogQWRkIGEgQ29uZmx1ZW5jZSBkYXRhIHNvdXJjZSB0byB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqL1xuICBhZGRDb25mbHVlbmNlRGF0YVNvdXJjZShwcm9wczogQ29uZmx1ZW5jZURhdGFTb3VyY2VBc3NvY2lhdGlvblByb3BzKTogQ29uZmx1ZW5jZURhdGFTb3VyY2U7XG5cbiAgLyoqXG4gICAqIEFkZCBhIFNhbGVzZm9yY2UgZGF0YSBzb3VyY2UgdG8gdGhlIGtub3dsZWRnZSBiYXNlLlxuICAgKi9cbiAgYWRkU2FsZXNmb3JjZURhdGFTb3VyY2UocHJvcHM6IFNhbGVzZm9yY2VEYXRhU291cmNlQXNzb2NpYXRpb25Qcm9wcyk6IFNhbGVzZm9yY2VEYXRhU291cmNlO1xuXG4gIC8qKlxuICAgKiBHcmFudCB0aGUgZ2l2ZW4gaWRlbnRpdHkgcGVybWlzc2lvbnMgdG8gcmV0cmlldmUgY29udGVudCBmcm9tIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICovXG4gIGdyYW50UmV0cmlldmUoZ3JhbnRlZTogaWFtLklHcmFudGFibGUpOiBpYW0uR3JhbnQ7XG5cbiAgLyoqXG4gICAqIEdyYW50IHRoZSBnaXZlbiBpZGVudGl0eSBwZXJtaXNzaW9ucyB0byByZXRyaWV2ZSBjb250ZW50IGZyb20gdGhlIGtub3dsZWRnZSBiYXNlLlxuICAgKi9cbiAgZ3JhbnRSZXRyaWV2ZUFuZEdlbmVyYXRlKGdyYW50ZWU6IGlhbS5JR3JhbnRhYmxlKTogaWFtLkdyYW50O1xufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFCU1RSQUNUIENMQVNTXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIFZlY3RvciBLbm93bGVkZ2UgQmFzZS5cbiAqIENvbnRhaW5zIG1ldGhvZHMgdmFsaWQgZm9yIEtCcyBlaXRoZXIgY3JlYXRlZCB3aXRoIENESyBvciBpbXBvcnRlZC5cbiAqL1xuYWJzdHJhY3QgY2xhc3MgVmVjdG9yS25vd2xlZGdlQmFzZUJhc2UgZXh0ZW5kcyBLbm93bGVkZ2VCYXNlQmFzZSBpbXBsZW1lbnRzIElWZWN0b3JLbm93bGVkZ2VCYXNlIHtcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGtub3dsZWRnZUJhc2VBcm46IHN0cmluZztcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGtub3dsZWRnZUJhc2VJZDogc3RyaW5nO1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgcm9sZTogaWFtLklSb2xlO1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBpbnN0cnVjdGlvbj86IHN0cmluZztcblxuICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogS25vd2xlZGdlQmFzZVR5cGUgPSBLbm93bGVkZ2VCYXNlVHlwZS5WRUNUT1I7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gSGVscGVyIG1ldGhvZHMgdG8gYWRkIERhdGEgU291cmNlc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcHVibGljIGFkZFMzRGF0YVNvdXJjZShwcm9wczogUzNEYXRhU291cmNlQXNzb2NpYXRpb25Qcm9wcyk6IFMzRGF0YVNvdXJjZSB7XG4gICAgcmV0dXJuIG5ldyBTM0RhdGFTb3VyY2UodGhpcywgYHMzLSR7cHJvcHMuYnVja2V0Lm5vZGUuYWRkcn1gLCB7XG4gICAgICBrbm93bGVkZ2VCYXNlOiB0aGlzLFxuICAgICAgLi4ucHJvcHMsXG4gICAgfSk7XG4gIH1cbiAgcHVibGljIGFkZFdlYkNyYXdsZXJEYXRhU291cmNlKHByb3BzOiBXZWJDcmF3bGVyRGF0YVNvdXJjZUFzc29jaWF0aW9uUHJvcHMpOiBXZWJDcmF3bGVyRGF0YVNvdXJjZSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChwcm9wcy5zb3VyY2VVcmxzWzBdKTtcbiAgICByZXR1cm4gbmV3IFdlYkNyYXdsZXJEYXRhU291cmNlKHRoaXMsIGB3ZWItJHt1cmwuaG9zdG5hbWUucmVwbGFjZSgnLicsICctJyl9YCwge1xuICAgICAga25vd2xlZGdlQmFzZTogdGhpcyxcbiAgICAgIC4uLnByb3BzLFxuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBhZGRTaGFyZVBvaW50RGF0YVNvdXJjZShwcm9wczogU2hhcmVQb2ludERhdGFTb3VyY2VBc3NvY2lhdGlvblByb3BzKTogU2hhcmVQb2ludERhdGFTb3VyY2Uge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocHJvcHMuc2l0ZVVybHNbMF0pO1xuICAgIHJldHVybiBuZXcgU2hhcmVQb2ludERhdGFTb3VyY2UodGhpcywgYHNwLSR7dXJsLmhvc3RuYW1lLnJlcGxhY2UoJy4nLCAnLScpfWAsIHtcbiAgICAgIGtub3dsZWRnZUJhc2U6IHRoaXMsXG4gICAgICAuLi5wcm9wcyxcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgYWRkQ29uZmx1ZW5jZURhdGFTb3VyY2UocHJvcHM6IENvbmZsdWVuY2VEYXRhU291cmNlQXNzb2NpYXRpb25Qcm9wcyk6IENvbmZsdWVuY2VEYXRhU291cmNlIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHByb3BzLmNvbmZsdWVuY2VVcmwpO1xuICAgIHJldHVybiBuZXcgQ29uZmx1ZW5jZURhdGFTb3VyY2UodGhpcywgYGNmLSR7dXJsLmhvc3RuYW1lLnJlcGxhY2UoJy4nLCAnLScpfWAsIHtcbiAgICAgIGtub3dsZWRnZUJhc2U6IHRoaXMsXG4gICAgICAuLi5wcm9wcyxcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgYWRkU2FsZXNmb3JjZURhdGFTb3VyY2UocHJvcHM6IFNhbGVzZm9yY2VEYXRhU291cmNlQXNzb2NpYXRpb25Qcm9wcyk6IFNhbGVzZm9yY2VEYXRhU291cmNlIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHByb3BzLmVuZHBvaW50KTtcbiAgICByZXR1cm4gbmV3IFNhbGVzZm9yY2VEYXRhU291cmNlKHRoaXMsIGBzZi0ke3VybC5ob3N0bmFtZS5yZXBsYWNlKCcuJywgJy0nKX1gLCB7XG4gICAgICBrbm93bGVkZ2VCYXNlOiB0aGlzLFxuICAgICAgLi4ucHJvcHMsXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICBQUk9QUyBGT1IgTkVXIENPTlNUUlVDVFxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIGtub3dsZWRnZSBiYXNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yS25vd2xlZGdlQmFzZVByb3BzIGV4dGVuZHMgQ29tbW9uS25vd2xlZGdlQmFzZVByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBlbWJlZGRpbmdzIG1vZGVsIGZvciB0aGUga25vd2xlZGdlIGJhc2VcbiAgICovXG4gIHJlYWRvbmx5IGVtYmVkZGluZ3NNb2RlbDogQmVkcm9ja0ZvdW5kYXRpb25Nb2RlbDtcblxuICAvKipcbiAgICogVGhlIHZlY3RvciB0eXBlIHRvIHN0b3JlIHZlY3RvciBlbWJlZGRpbmdzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIFZlY3RvclR5cGUuRkxPQVRJTkdfUE9JTlRcbiAgICovXG4gIHJlYWRvbmx5IHZlY3RvclR5cGU/OiBWZWN0b3JUeXBlO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgdmVjdG9yIGluZGV4LlxuICAgKiBJZiB2ZWN0b3JTdG9yZSBpcyBub3Qgb2YgdHlwZSBgVmVjdG9yQ29sbGVjdGlvbmAsXG4gICAqIGRvIG5vdCBpbmNsdWRlIHRoaXMgcHJvcGVydHkgYXMgaXQgd2lsbCB0aHJvdyBlcnJvci5cbiAgICpcbiAgICogQGRlZmF1bHQgLSAnYmVkcm9jay1rbm93bGVkZ2UtYmFzZS1kZWZhdWx0LWluZGV4J1xuICAgKi9cbiAgcmVhZG9ubHkgaW5kZXhOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZmllbGQgaW4gdGhlIHZlY3RvciBpbmRleC5cbiAgICogSWYgdmVjdG9yU3RvcmUgaXMgbm90IG9mIHR5cGUgYFZlY3RvckNvbGxlY3Rpb25gLFxuICAgKiBkbyBub3QgaW5jbHVkZSB0aGlzIHByb3BlcnR5IGFzIGl0IHdpbGwgdGhyb3cgZXJyb3IuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gJ2JlZHJvY2sta25vd2xlZGdlLWJhc2UtZGVmYXVsdC12ZWN0b3InXG4gICAqL1xuICByZWFkb25seSB2ZWN0b3JGaWVsZD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHZlY3RvciBzdG9yZSBmb3IgdGhlIGtub3dsZWRnZSBiYXNlLiBNdXN0IGJlIGVpdGhlciBvZlxuICAgKiB0eXBlIGBWZWN0b3JDb2xsZWN0aW9uYCwgYFJlZGlzRW50ZXJwcmlzZVZlY3RvclN0b3JlYCxcbiAgICogYFBpbmVjb25lVmVjdG9yU3RvcmVgIG9yIGBBbWF6b25BdXJvcmFWZWN0b3JTdG9yZWAuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gQSBuZXcgT3BlblNlYXJjaCBTZXJ2ZXJsZXNzIHZlY3RvciBjb2xsZWN0aW9uIGlzIGNyZWF0ZWQuXG4gICAqL1xuICByZWFkb25seSB2ZWN0b3JTdG9yZT86XG4gICAgfCBWZWN0b3JDb2xsZWN0aW9uXG4gICAgfCBQaW5lY29uZVZlY3RvclN0b3JlXG4gICAgfCBBbWF6b25BdXJvcmFWZWN0b3JTdG9yZVxuICAgIHwgRXhpc3RpbmdBbWF6b25BdXJvcmFWZWN0b3JTdG9yZTtcblxuICAvKipcbiAgICogVGhlIHZlY3RvciBpbmRleCBmb3IgdGhlIE9wZW5TZWFyY2ggU2VydmVybGVzcyBiYWNrZWQga25vd2xlZGdlIGJhc2UuXG4gICAqIElmIHZlY3RvclN0b3JlIGlzIG5vdCBvZiB0eXBlIGBWZWN0b3JDb2xsZWN0aW9uYCwgZG8gbm90IGluY2x1ZGVcbiAgICogdGhpcyBwcm9wZXJ0eSBhcyBpdCB3aWxsIHRocm93IGVycm9yLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIEEgbmV3IHZlY3RvciBpbmRleCBpcyBjcmVhdGVkIG9uIHRoZSBWZWN0b3IgQ29sbGVjdGlvblxuICAgKiBpZiB2ZWN0b3Igc3RvcmUgaXMgb2YgYFZlY3RvckNvbGxlY3Rpb25gIHR5cGUuXG4gICAqL1xuICByZWFkb25seSB2ZWN0b3JJbmRleD86IFZlY3RvckluZGV4O1xufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICBBVFRSUyBGT1IgSU1QT1JURUQgQ09OU1RSVUNUXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKipcbiAqIFByb3BlcnRpZXMgZm9yIGltcG9ydGluZyBhIGtub3dsZWRnZSBiYXNlIG91dHNpZGUgb2YgdGhpcyBzdGFja1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFZlY3Rvcktub3dsZWRnZUJhc2VBdHRyaWJ1dGVzIGV4dGVuZHMgQ29tbW9uS25vd2xlZGdlQmFzZUF0dHJpYnV0ZXMge1xuICAvLyBVbmlxdWUgcHJvcHMgZm9yIHZlY3RvciBLQnMgd291bGQgYmUgZGVmaW5lZCBoZXJlXG59XG5cbi8qKlxuICogRGVwbG95cyBhIEJlZHJvY2sgS25vd2xlZGdlIEJhc2UgYW5kIGNvbmZpZ3VyZXMgYSBiYWNrZW5kIGJ5IE9wZW5TZWFyY2ggU2VydmVybGVzcyxcbiAqIFBpbmVjb25lLCBSZWRpcyBFbnRlcnByaXNlIENsb3VkIG9yIEFtYXpvbiBBdXJvcmEgUG9zdGdyZVNRTC5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBWZWN0b3JLbm93bGVkZ2VCYXNlIGV4dGVuZHMgVmVjdG9yS25vd2xlZGdlQmFzZUJhc2Uge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gSW1wb3J0IE1ldGhvZHNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUtub3dsZWRnZUJhc2VBdHRyaWJ1dGVzKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBhdHRyczogVmVjdG9yS25vd2xlZGdlQmFzZUF0dHJpYnV0ZXMsXG4gICk6IElWZWN0b3JLbm93bGVkZ2VCYXNlIHtcbiAgICBjb25zdCBzdGFjayA9IFN0YWNrLm9mKHNjb3BlKTtcblxuICAgIGNsYXNzIEltcG9ydCBleHRlbmRzIFZlY3Rvcktub3dsZWRnZUJhc2VCYXNlIHtcbiAgICAgIHB1YmxpYyByZWFkb25seSByb2xlID0gaWFtLlJvbGUuZnJvbVJvbGVBcm4odGhpcywgYGtiLSR7YXR0cnMua25vd2xlZGdlQmFzZUlkfS1yb2xlYCwgYXR0cnMuZXhlY3V0aW9uUm9sZUFybik7XG4gICAgICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpcHRpb24gPSBhdHRycy5kZXNjcmlwdGlvbjtcbiAgICAgIHB1YmxpYyByZWFkb25seSBpbnN0cnVjdGlvbiA9IGF0dHJzLmluc3RydWN0aW9uO1xuICAgICAgcHVibGljIHJlYWRvbmx5IGtub3dsZWRnZUJhc2VJZCA9IGF0dHJzLmtub3dsZWRnZUJhc2VJZDtcbiAgICAgIHB1YmxpYyByZWFkb25seSBrbm93bGVkZ2VCYXNlQXJuID0gc3RhY2suZm9ybWF0QXJuKHtcbiAgICAgICAgc2VydmljZTogJ2JlZHJvY2snLFxuICAgICAgICByZXNvdXJjZTogJ2tub3dsZWRnZS1iYXNlJyxcbiAgICAgICAgcmVzb3VyY2VOYW1lOiBhdHRycy5rbm93bGVkZ2VCYXNlSWQsXG4gICAgICAgIGFybkZvcm1hdDogQXJuRm9ybWF0LlNMQVNIX1JFU09VUkNFX05BTUUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbXBvcnQoc2NvcGUsIGlkKTtcbiAgfVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQXR0cmlidXRlc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEluc3RhbmNlIG9mIGtub3dsZWRnZSBiYXNlLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGtub3dsZWRnZUJhc2VJbnN0YW5jZTogYmVkcm9jay5DZm5Lbm93bGVkZ2VCYXNlO1xuXG4gIC8qKlxuICAgKiBUaGUgcm9sZSB0aGUgS25vd2xlZGdlIEJhc2UgdXNlcyB0byBhY2Nlc3MgdGhlIHZlY3RvciBzdG9yZSBhbmQgZGF0YSBzb3VyY2UuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgcm9sZTogaWFtLklSb2xlO1xuXG4gIC8qKlxuICAgKiBUaGUgdmVjdG9yIHN0b3JlIGZvciB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgdmVjdG9yU3RvcmU6XG4gICAgfCBWZWN0b3JDb2xsZWN0aW9uXG4gICAgfCBQaW5lY29uZVZlY3RvclN0b3JlXG4gICAgfCBBbWF6b25BdXJvcmFWZWN0b3JTdG9yZVxuICAgIHwgRXhpc3RpbmdBbWF6b25BdXJvcmFWZWN0b3JTdG9yZTtcblxuICAvKipcbiAgICogQSBkZXNjcmlwdGlvbiBvZiB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqL1xuICByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogSW5zdHJ1Y3Rpb25zIGZvciBhZ2VudHMgYmFzZWQgb24gdGhlIGRlc2lnbiBhbmQgdHlwZSBvZiBpbmZvcm1hdGlvbiBvZiB0aGVcbiAgICogS25vd2xlZGdlIEJhc2UuIFRoaXMgd2lsbCBpbXBhY3QgaG93IEFnZW50cyBpbnRlcmFjdCB3aXRoIHRoZSBLbm93bGVkZ2UgQmFzZS5cbiAgICovXG4gIHJlYWRvbmx5IGluc3RydWN0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgQVJOIG9mIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBrbm93bGVkZ2VCYXNlQXJuOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkga25vd2xlZGdlQmFzZUlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBPcGVuU2VhcmNoIHZlY3RvciBpbmRleCBmb3IgdGhlIGtub3dsZWRnZSBiYXNlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJpdmF0ZSB2ZWN0b3JJbmRleD86IFZlY3RvckluZGV4O1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBwcml2YXRlIHZlY3RvclN0b3JlVHlwZTogVmVjdG9yU3RvcmVUeXBlO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBWZWN0b3JLbm93bGVkZ2VCYXNlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gU2V0IHByb3BlcnRpZXMgb3IgZGVmYXVsdHNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBjb25zdCBlbWJlZGRpbmdzTW9kZWwgPSBwcm9wcy5lbWJlZGRpbmdzTW9kZWw7XG4gICAgY29uc3QgdmVjdG9yVHlwZSA9IHByb3BzLnZlY3RvclR5cGUgPz8gVmVjdG9yVHlwZS5GTE9BVElOR19QT0lOVDtcbiAgICBjb25zdCBpbmRleE5hbWUgPSBwcm9wcy5pbmRleE5hbWUgPz8gJ2JlZHJvY2sta25vd2xlZGdlLWJhc2UtZGVmYXVsdC1pbmRleCc7XG4gICAgY29uc3QgdmVjdG9yRmllbGQgPSBwcm9wcy52ZWN0b3JGaWVsZCA/PyAnYmVkcm9jay1rbm93bGVkZ2UtYmFzZS1kZWZhdWx0LXZlY3Rvcic7XG4gICAgY29uc3QgdGV4dEZpZWxkID0gJ0FNQVpPTl9CRURST0NLX1RFWFRfQ0hVTksnO1xuICAgIGNvbnN0IG1ldGFkYXRhRmllbGQgPSAnQU1BWk9OX0JFRFJPQ0tfTUVUQURBVEEnO1xuXG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IHByb3BzLmRlc2NyaXB0aW9uID8/ICdDREsgZGVwbG95ZWQgS25vd2xlZGdlIGJhc2UnOyAvLyBldmVuIHRob3VnaCB0aGlzIHByb3AgaXMgb3B0aW9uYWwsIGlmIG5vIHZhbHVlIGlzIHByb3ZpZGVkIGl0IHdpbGwgZmFpbCB0byBkZXBsb3lcbiAgICAvL3RoaXMua25vd2xlZGdlQmFzZVN0YXRlID0gcHJvcHMua25vd2xlZGdlQmFzZVN0YXRlID8/ICdFTkFCTEVEJztcbiAgICB0aGlzLmluc3RydWN0aW9uID0gcHJvcHMuaW5zdHJ1Y3Rpb247XG5cbiAgICB2YWxpZGF0ZU1vZGVsKGVtYmVkZGluZ3NNb2RlbCwgdmVjdG9yVHlwZSk7XG4gICAgdmFsaWRhdGVWZWN0b3JJbmRleChwcm9wcy52ZWN0b3JTdG9yZSwgcHJvcHMudmVjdG9ySW5kZXgsIHByb3BzLnZlY3RvckZpZWxkLCBwcm9wcy5pbmRleE5hbWUpO1xuICAgIGlmIChwcm9wcy52ZWN0b3JJbmRleCkge1xuICAgICAgdmFsaWRhdGVJbmRleFBhcmFtZXRlcnMocHJvcHMudmVjdG9ySW5kZXgsIGluZGV4TmFtZSwgdmVjdG9yRmllbGQpO1xuICAgIH1cblxuICAgIHRoaXMubmFtZSA9IHByb3BzLm5hbWUgPz8gZ2VuZXJhdGVQaHlzaWNhbE5hbWVWMih0aGlzLCAnS0InLCB7IG1heExlbmd0aDogMzIgfSk7XG5cbiAgICBpZiAocHJvcHMuZXhpc3RpbmdSb2xlKSB7XG4gICAgICB0aGlzLnJvbGUgPSBwcm9wcy5leGlzdGluZ1JvbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJvbGVOYW1lID0gZ2VuZXJhdGVQaHlzaWNhbE5hbWVWMih0aGlzLCAnQW1hem9uQmVkcm9ja0V4ZWN1dGlvblJvbGVGb3JLbm93bGVkZ2VCYXNlJywgeyBtYXhMZW5ndGg6IDY0IH0pO1xuICAgICAgdGhpcy5yb2xlID0gbmV3IGlhbS5Sb2xlKHRoaXMsICdSb2xlJywge1xuICAgICAgICByb2xlTmFtZTogcm9sZU5hbWUsXG4gICAgICAgIGFzc3VtZWRCeTogbmV3IGlhbS5TZXJ2aWNlUHJpbmNpcGFsKCdiZWRyb2NrLmFtYXpvbmF3cy5jb20nLCB7XG4gICAgICAgICAgY29uZGl0aW9uczoge1xuICAgICAgICAgICAgU3RyaW5nRXF1YWxzOiB7ICdhd3M6U291cmNlQWNjb3VudCc6IFN0YWNrLm9mKHRoaXMpLmFjY291bnQgfSxcbiAgICAgICAgICAgIEFybkxpa2U6IHtcbiAgICAgICAgICAgICAgJ2F3czpTb3VyY2VBcm4nOiBTdGFjay5vZih0aGlzKS5mb3JtYXRBcm4oe1xuICAgICAgICAgICAgICAgIHNlcnZpY2U6ICdiZWRyb2NrJyxcbiAgICAgICAgICAgICAgICByZXNvdXJjZTogJ2tub3dsZWRnZS1iYXNlJyxcbiAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICcqJyxcbiAgICAgICAgICAgICAgICBhcm5Gb3JtYXQ6IEFybkZvcm1hdC5TTEFTSF9SRVNPVVJDRV9OQU1FLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5yb2xlLmFkZFRvUHJpbmNpcGFsUG9saWN5KFxuICAgICAgICBuZXcgaWFtLlBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgYWN0aW9uczogWydiZWRyb2NrOkludm9rZU1vZGVsJ10sXG4gICAgICAgICAgcmVzb3VyY2VzOiBbZW1iZWRkaW5nc01vZGVsLmFzQXJuKHRoaXMpXSxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHZlY3RvciBzdG9yZSBpZiB0aGUgdmVjdG9yIHN0b3JlIHdhcyBwcm92aWRlZCBieSB0aGUgdXNlci5cbiAgICAgKiBPdGhlcndpc2UgY2hlY2sgYWdhaW50cyBhbGwgcG9zc2libGUgdmVjdG9yIGRhdGFzdG9yZXMuXG4gICAgICogSWYgbm9uZSB3YXMgcHJvdmlkZWQgY3JlYXRlIGRlZmF1bHQgT3BlblNlYXJjaCBTZXJ2ZXJsZXNzIENvbGxlY3Rpb24uXG4gICAgICovXG4gICAgaWYgKHByb3BzLnZlY3RvclN0b3JlIGluc3RhbmNlb2YgVmVjdG9yQ29sbGVjdGlvbikge1xuICAgICAgKHsgdmVjdG9yU3RvcmU6IHRoaXMudmVjdG9yU3RvcmUsIHZlY3RvclN0b3JlVHlwZTogdGhpcy52ZWN0b3JTdG9yZVR5cGUgfSA9XG4gICAgICAgIHRoaXMuaGFuZGxlT3BlblNlYXJjaENvbGxlY3Rpb24ocHJvcHMpKTtcbiAgICB9IGVsc2UgaWYgKHByb3BzLnZlY3RvclN0b3JlIGluc3RhbmNlb2YgUGluZWNvbmVWZWN0b3JTdG9yZSkge1xuICAgICAgKHsgdmVjdG9yU3RvcmU6IHRoaXMudmVjdG9yU3RvcmUsIHZlY3RvclN0b3JlVHlwZTogdGhpcy52ZWN0b3JTdG9yZVR5cGUgfSA9XG4gICAgICAgIHRoaXMuaGFuZGxlUGluZWNvbmVWZWN0b3JTdG9yZShwcm9wcykpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBwcm9wcy52ZWN0b3JTdG9yZSBpbnN0YW5jZW9mIEFtYXpvbkF1cm9yYVZlY3RvclN0b3JlIHx8XG4gICAgICBwcm9wcy52ZWN0b3JTdG9yZSBpbnN0YW5jZW9mIEV4aXN0aW5nQW1hem9uQXVyb3JhVmVjdG9yU3RvcmVcbiAgICApIHtcbiAgICAgICh7IHZlY3RvclN0b3JlOiB0aGlzLnZlY3RvclN0b3JlLCB2ZWN0b3JTdG9yZVR5cGU6IHRoaXMudmVjdG9yU3RvcmVUeXBlIH0gPVxuICAgICAgICB0aGlzLmhhbmRsZUFtYXpvbkF1cm9yYVZlY3RvclN0b3JlKHByb3BzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh7IHZlY3RvclN0b3JlOiB0aGlzLnZlY3RvclN0b3JlLCB2ZWN0b3JTdG9yZVR5cGU6IHRoaXMudmVjdG9yU3RvcmVUeXBlIH0gPVxuICAgICAgICB0aGlzLmhhbmRsZU9wZW5TZWFyY2hEZWZhdWx0VmVjdG9yQ29sbGVjdGlvbigpKTtcbiAgICB9XG5cbiAgICAvLyBwZXJmb3JtIHRoaXMgdmFsaWRhdGlvbiBhZnRlciB0aGUgdmVjdG9yIHN0b3JlIGlzIGhhbmRsZWQgc2luY2UgaWYgdGhlIHVzZXJcbiAgICAvLyBkb2Vzbid0IHByb3ZpZGUgb25lLCB0aGUgbWV0aG9kIGFib3ZlIHdpbGwgY3JlYXRlIGl0XG4gICAgdmFsaWRhdGVWZWN0b3JUeXBlKHRoaXMudmVjdG9yU3RvcmUsIHZlY3RvclR5cGUpO1xuXG4gICAgLyoqXG4gICAgICogV2UgbmVlZCB0byBhZGQgYHNlY3JldHNtYW5hZ2VyOkdldFNlY3JldFZhbHVlYCB0byB0aGUgcm9sZVxuICAgICAqIG9mIHRoZSBrbm93bGVkZ2UgYmFzZSBpZiB3ZSB1c2UgZGF0YSBzb3VyY2VzXG4gICAgICogb3RoZXIgdGhhbiBPcGVuU2VhcmNoIFNlcnZlcmxlc3MuXG4gICAgICovXG4gICAgaWYgKCEodGhpcy52ZWN0b3JTdG9yZSBpbnN0YW5jZW9mIFZlY3RvckNvbGxlY3Rpb24pKSB7XG4gICAgICB0aGlzLnJvbGUuYWRkVG9QcmluY2lwYWxQb2xpY3koXG4gICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBhY3Rpb25zOiBbJ3NlY3JldHNtYW5hZ2VyOkdldFNlY3JldFZhbHVlJ10sXG4gICAgICAgICAgcmVzb3VyY2VzOiBbdGhpcy52ZWN0b3JTdG9yZS5jcmVkZW50aWFsc1NlY3JldEFybl0sXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXZSBuZWVkIHRvIGFkZCBgcmRzLWRhdGE6RXhlY3V0ZVN0YXRlbWVudGAsXG4gICAgICogYHJkcy1kYXRhOkJhdGNoRXhlY3V0ZVN0YXRlbWVudGAgYW5kXG4gICAgICogYHJkczpEZXNjcmliZURCQ2x1c3RlcnNgIHRvIHRoZSByb2xlXG4gICAgICogb2YgdGhlIGtub3dsZWRnZSBiYXNlIGlmIHdlIHVzZSBBbWF6b24gQXVyb3JhIGFzXG4gICAgICogYSBkYXRhIHNvdXJjZS5cbiAgICAgKi9cbiAgICBpZiAoXG4gICAgICB0aGlzLnZlY3RvclN0b3JlIGluc3RhbmNlb2YgQW1hem9uQXVyb3JhVmVjdG9yU3RvcmUgfHxcbiAgICAgIHRoaXMudmVjdG9yU3RvcmUgaW5zdGFuY2VvZiBFeGlzdGluZ0FtYXpvbkF1cm9yYVZlY3RvclN0b3JlXG4gICAgKSB7XG4gICAgICB0aGlzLnJvbGUuYWRkVG9QcmluY2lwYWxQb2xpY3koXG4gICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBhY3Rpb25zOiBbJ3Jkcy1kYXRhOkV4ZWN1dGVTdGF0ZW1lbnQnLCAncmRzLWRhdGE6QmF0Y2hFeGVjdXRlU3RhdGVtZW50JywgJ3JkczpEZXNjcmliZURCQ2x1c3RlcnMnXSxcbiAgICAgICAgICByZXNvdXJjZXM6IFt0aGlzLnZlY3RvclN0b3JlLnJlc291cmNlQXJuXSxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgdmVjdG9yIGluZGV4IGlmIHRoZSB2ZWN0b3Igc3RvcmUgaXMgT3BlblNlYXJjaCBTZXJ2ZXJsZXNzXG4gICAgICogYW5kIGl0IHdhcyBub3QgcHJvdmlkZWQuIE90aGVyd2lzZSB1c2UgdGhlIHByb3ZpZGVkIHZlY3RvciBpbmRleC5cbiAgICAgKi9cbiAgICBpZiAodGhpcy52ZWN0b3JTdG9yZVR5cGUgPT09IFZlY3RvclN0b3JlVHlwZS5PUEVOU0VBUkNIX1NFUlZFUkxFU1MpIHtcbiAgICAgIGlmICghcHJvcHMudmVjdG9ySW5kZXgpIHtcbiAgICAgICAgdGhpcy52ZWN0b3JJbmRleCA9IG5ldyBWZWN0b3JJbmRleCh0aGlzLCAnS0JJbmRleCcsIHtcbiAgICAgICAgICBjb2xsZWN0aW9uOiB0aGlzLnZlY3RvclN0b3JlIGFzIFZlY3RvckNvbGxlY3Rpb24sXG4gICAgICAgICAgaW5kZXhOYW1lLFxuICAgICAgICAgIHZlY3RvckZpZWxkLFxuICAgICAgICAgIHZlY3RvckRpbWVuc2lvbnM6IGVtYmVkZGluZ3NNb2RlbC52ZWN0b3JEaW1lbnNpb25zISxcbiAgICAgICAgICBwcmVjaXNpb246IHByb3BzLnZlY3RvclR5cGUgPT09IFZlY3RvclR5cGUuQklOQVJZID8gJ0JpbmFyeScgOiAnZmxvYXQnLFxuICAgICAgICAgIGRpc3RhbmNlVHlwZTogcHJvcHMudmVjdG9yVHlwZSA9PT0gVmVjdG9yVHlwZS5CSU5BUlkgPyAnaGFtbWluZycgOiAnbDInLFxuICAgICAgICAgIG1hcHBpbmdzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1hcHBpbmdGaWVsZDogJ0FNQVpPTl9CRURST0NLX1RFWFRfQ0hVTksnLFxuICAgICAgICAgICAgICBkYXRhVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbWFwcGluZ0ZpZWxkOiAnQU1BWk9OX0JFRFJPQ0tfTUVUQURBVEEnLFxuICAgICAgICAgICAgICBkYXRhVHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICBmaWx0ZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy52ZWN0b3JJbmRleC5ub2RlLmFkZERlcGVuZGVuY3kodGhpcy52ZWN0b3JTdG9yZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnZlY3RvckluZGV4ID0gcHJvcHMudmVjdG9ySW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHN0b3JhZ2UgY29uZmlndXJhaW9uLiBJZiBpdCBpcyBvZiB0eXBlIG9mXG4gICAgICogYEFtYXpvbkF1cm9yYVZlY3RvclN0b3JlYCBvciBgRXhpc3RpbmdBbWF6b25BdXJvcmFWZWN0b3JTdG9yZWAsXG4gICAgICogdGhlbiBnZXQgdGV4dEZpZWxkLCBtZXRhZGF0YUZpZWxkIGFuZCB2ZWN0b3JGaWVsZCBmcm9tXG4gICAgICogdGhlIGFyZ3VtZW50cy4gT3RoZXJ3aXNlIHVzZSBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKi9cbiAgICBjb25zdCBzdG9yYWdlQ29uZmlndXJhdGlvbjogU3RvcmFnZUNvbmZpZ3VyYXRpb24gPSB7XG4gICAgICBpbmRleE5hbWU6IGluZGV4TmFtZSxcbiAgICAgIHZlY3RvclN0b3JlOiB0aGlzLnZlY3RvclN0b3JlLFxuICAgICAgdmVjdG9yU3RvcmVUeXBlOiB0aGlzLnZlY3RvclN0b3JlVHlwZSxcbiAgICAgIHZlY3RvckZpZWxkOlxuICAgICAgICB0aGlzLnZlY3RvclN0b3JlIGluc3RhbmNlb2YgQW1hem9uQXVyb3JhVmVjdG9yU3RvcmUgfHxcbiAgICAgICAgdGhpcy52ZWN0b3JTdG9yZSBpbnN0YW5jZW9mIEV4aXN0aW5nQW1hem9uQXVyb3JhVmVjdG9yU3RvcmVcbiAgICAgICAgICA/IHRoaXMudmVjdG9yU3RvcmUudmVjdG9yRmllbGRcbiAgICAgICAgICA6IHZlY3RvckZpZWxkLFxuICAgICAgdGV4dEZpZWxkOlxuICAgICAgICB0aGlzLnZlY3RvclN0b3JlIGluc3RhbmNlb2YgQW1hem9uQXVyb3JhVmVjdG9yU3RvcmUgfHxcbiAgICAgICAgdGhpcy52ZWN0b3JTdG9yZSBpbnN0YW5jZW9mIEV4aXN0aW5nQW1hem9uQXVyb3JhVmVjdG9yU3RvcmUgfHxcbiAgICAgICAgdGhpcy52ZWN0b3JTdG9yZSBpbnN0YW5jZW9mIFBpbmVjb25lVmVjdG9yU3RvcmVcbiAgICAgICAgICA/IHRoaXMudmVjdG9yU3RvcmUudGV4dEZpZWxkXG4gICAgICAgICAgOiB0ZXh0RmllbGQsXG4gICAgICBtZXRhZGF0YUZpZWxkOlxuICAgICAgICB0aGlzLnZlY3RvclN0b3JlIGluc3RhbmNlb2YgQW1hem9uQXVyb3JhVmVjdG9yU3RvcmUgfHxcbiAgICAgICAgdGhpcy52ZWN0b3JTdG9yZSBpbnN0YW5jZW9mIEV4aXN0aW5nQW1hem9uQXVyb3JhVmVjdG9yU3RvcmUgfHxcbiAgICAgICAgdGhpcy52ZWN0b3JTdG9yZSBpbnN0YW5jZW9mIFBpbmVjb25lVmVjdG9yU3RvcmVcbiAgICAgICAgICA/IHRoaXMudmVjdG9yU3RvcmUubWV0YWRhdGFGaWVsZFxuICAgICAgICAgIDogbWV0YWRhdGFGaWVsZCxcbiAgICB9O1xuXG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBMMSBJbnN0YW50aWF0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgY29uc3Qga25vd2xlZGdlQmFzZSA9IG5ldyBiZWRyb2NrLkNmbktub3dsZWRnZUJhc2UodGhpcywgJ015Q2ZuS25vd2xlZGdlQmFzZScsIHtcbiAgICAgIGtub3dsZWRnZUJhc2VDb25maWd1cmF0aW9uOiB7XG4gICAgICAgIHR5cGU6IEtub3dsZWRnZUJhc2VUeXBlLlZFQ1RPUixcbiAgICAgICAgdmVjdG9yS25vd2xlZGdlQmFzZUNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICBlbWJlZGRpbmdNb2RlbEFybjogZW1iZWRkaW5nc01vZGVsLmFzQXJuKHRoaXMpLFxuICAgICAgICAgIC8vIFVzZWQgdGhpcyBhcHByb2FjaCBhcyBpZiBwcm9wZXJ0eSBpcyBzcGVjaWZpZWQgb24gbW9kZWxzIHRoYXQgZG8gbm90XG4gICAgICAgICAgLy8gc3VwcG9ydCBjb25maWd1cmFibGUgZGltZW5zaW9ucyBDbG91ZEZvcm1hdGlvbiB0aHJvd3MgYW4gZXJyb3IgYXQgcnVudGltZVxuICAgICAgICAgIGVtYmVkZGluZ01vZGVsQ29uZmlndXJhdGlvbjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgYmVkcm9ja0VtYmVkZGluZ01vZGVsQ29uZmlndXJhdGlvbjogZW1iZWRkaW5nc01vZGVsLm1vZGVsSWQgPT09ICdhbWF6b24udGl0YW4tZW1iZWQtdGV4dC12MjowJ1xuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgZGltZW5zaW9uczogZW1iZWRkaW5nc01vZGVsLnZlY3RvckRpbWVuc2lvbnMsXG4gICAgICAgICAgICAgICAgICBlbWJlZGRpbmdEYXRhVHlwZTogdmVjdG9yVHlwZSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB7IGVtYmVkZGluZ0RhdGFUeXBlOiB2ZWN0b3JUeXBlIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHJvbGVBcm46IHRoaXMucm9sZS5yb2xlQXJuLFxuICAgICAgc3RvcmFnZUNvbmZpZ3VyYXRpb246IGdldFN0b3JhZ2VDb25maWd1cmF0aW9uKHN0b3JhZ2VDb25maWd1cmF0aW9uKSxcbiAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy5kZXNjcmlwdGlvbixcbiAgICB9KTtcblxuICAgIHRoaXMua25vd2xlZGdlQmFzZUluc3RhbmNlID0ga25vd2xlZGdlQmFzZTtcblxuICAgIGNvbnN0IGtiQ1JQb2xpY3kgPSBuZXcgaWFtLlBvbGljeSh0aGlzLCAnS0JDUlBvbGljeScsIHtcbiAgICAgIC8vIHJvbGVzOiBbY3JQcm92aWRlci5yb2xlXSxcbiAgICAgIHJvbGVzOiBbdGhpcy5yb2xlXSxcbiAgICAgIHN0YXRlbWVudHM6IFtcbiAgICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgICdiZWRyb2NrOkNyZWF0ZUtub3dsZWRnZUJhc2UnLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXZSBuZWVkIHRvIGFkZCBgYmVkcm9jazpBc3NvY2lhdGVUaGlyZFBhcnR5S25vd2xlZGdlQmFzZWAgaWZcbiAgICAgICAgICAgICAqIHdlIGFyZSBkZXBsb3lpbmcgUmVkaXMgb3IgUGluZWNvbmUgZGF0YSBzb3VyY2VzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vLi4uKHRoaXMudmVjdG9yU3RvcmVUeXBlID09PSBWZWN0b3JTdG9yZVR5cGUuUkVESVNfRU5URVJQUklTRV9DTE9VRCB8fFxuICAgICAgICAgICAgLi4uKHRoaXMudmVjdG9yU3RvcmVUeXBlID09PSBWZWN0b3JTdG9yZVR5cGUuUElORUNPTkUgPyBbJ2JlZHJvY2s6QXNzb2NpYXRlVGhpcmRQYXJ0eUtub3dsZWRnZUJhc2UnXSA6IFtdKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIHJlc291cmNlczogWycqJ10sXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgaWFtLlBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgYWN0aW9uczogWydiZWRyb2NrOlVwZGF0ZUtub3dsZWRnZUJhc2UnLCAnYmVkcm9jazpEZWxldGVLbm93bGVkZ2VCYXNlJywgJ2JlZHJvY2s6VGFnUmVzb3VyY2UnXSxcbiAgICAgICAgICByZXNvdXJjZXM6IFtcbiAgICAgICAgICAgIFN0YWNrLm9mKHRoaXMpLmZvcm1hdEFybih7XG4gICAgICAgICAgICAgIHNlcnZpY2U6ICdiZWRyb2NrJyxcbiAgICAgICAgICAgICAgcmVzb3VyY2U6ICdrbm93bGVkZ2UtYmFzZScsXG4gICAgICAgICAgICAgIHJlc291cmNlTmFtZTogJyonLFxuICAgICAgICAgICAgICBhcm5Gb3JtYXQ6IEFybkZvcm1hdC5TTEFTSF9SRVNPVVJDRV9OQU1FLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgXSxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBhY3Rpb25zOiBbJ2lhbTpQYXNzUm9sZSddLFxuICAgICAgICAgIHJlc291cmNlczogW3RoaXMucm9sZS5yb2xlQXJuXSxcbiAgICAgICAgfSksXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAga25vd2xlZGdlQmFzZS5ub2RlLmFkZERlcGVuZGVuY3kodGhpcy5yb2xlKTtcbiAgICBrbm93bGVkZ2VCYXNlLm5vZGUuYWRkRGVwZW5kZW5jeShrYkNSUG9saWN5KTtcbiAgICBpZiAodGhpcy52ZWN0b3JTdG9yZVR5cGUgPT09IFZlY3RvclN0b3JlVHlwZS5PUEVOU0VBUkNIX1NFUlZFUkxFU1MgJiYgdGhpcy52ZWN0b3JJbmRleCkge1xuICAgICAga25vd2xlZGdlQmFzZS5ub2RlLmFkZERlcGVuZGVuY3kodGhpcy52ZWN0b3JJbmRleCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnZlY3RvclN0b3JlVHlwZSA9PT0gVmVjdG9yU3RvcmVUeXBlLkFNQVpPTl9BVVJPUkEpIHtcbiAgICAgIGtub3dsZWRnZUJhc2Uubm9kZS5hZGREZXBlbmRlbmN5KHRoaXMudmVjdG9yU3RvcmUpO1xuICAgIH1cblxuICAgIE5hZ1N1cHByZXNzaW9ucy5hZGRSZXNvdXJjZVN1cHByZXNzaW9ucyhcbiAgICAgIGtiQ1JQb2xpY3ksXG4gICAgICBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ0F3c1NvbHV0aW9ucy1JQU01JyxcbiAgICAgICAgICByZWFzb246IFwiQmVkcm9jayBDcmVhdGVLbm93bGVkZ2VCYXNlIGNhbid0IGJlIHJlc3RyaWN0ZWQgYnkgcmVzb3VyY2UuXCIsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdHJ1ZSxcbiAgICApO1xuXG4gICAgdGhpcy5rbm93bGVkZ2VCYXNlQXJuID0ga25vd2xlZGdlQmFzZS5hdHRyS25vd2xlZGdlQmFzZUFybjtcbiAgICB0aGlzLmtub3dsZWRnZUJhc2VJZCA9IGtub3dsZWRnZUJhc2UuYXR0cktub3dsZWRnZUJhc2VJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgVmVjdG9yQ29sbGVjdGlvbiB0eXBlIG9mIFZlY3RvclN0b3JlLlxuICAgKlxuICAgKiBAcGFyYW0gcHJvcHMgLSBUaGUgcHJvcGVydGllcyBvZiB0aGUgS25vd2xlZGdlQmFzZS5cbiAgICogQHJldHVybnMgVGhlIGluc3RhbmNlIG9mIFZlY3RvckNvbGxlY3Rpb24sIFZlY3RvclN0b3JlVHlwZS5cbiAgICogQGludGVybmFsIFRoaXMgaXMgYW4gaW50ZXJuYWwgY29yZSBmdW5jdGlvbiBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZGlyZWN0bHkuXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZU9wZW5TZWFyY2hDb2xsZWN0aW9uKHByb3BzOiBWZWN0b3JLbm93bGVkZ2VCYXNlUHJvcHMpOiB7XG4gICAgdmVjdG9yU3RvcmU6IFZlY3RvckNvbGxlY3Rpb247XG4gICAgdmVjdG9yU3RvcmVUeXBlOiBWZWN0b3JTdG9yZVR5cGU7XG4gIH0ge1xuICAgIGNvbnN0IHZlY3RvclN0b3JlID0gcHJvcHMudmVjdG9yU3RvcmUgYXMgVmVjdG9yQ29sbGVjdGlvbjtcbiAgICB2ZWN0b3JTdG9yZS5ncmFudERhdGFBY2Nlc3ModGhpcy5yb2xlKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmVjdG9yU3RvcmU6IHZlY3RvclN0b3JlLFxuICAgICAgdmVjdG9yU3RvcmVUeXBlOiBWZWN0b3JTdG9yZVR5cGUuT1BFTlNFQVJDSF9TRVJWRVJMRVNTLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIFBpbmVjb25lVmVjdG9yU3RvcmUgdHlwZSBvZiBWZWN0b3JTdG9yZS5cbiAgICpcbiAgICogQHBhcmFtIHByb3BzIC0gVGhlIHByb3BlcnRpZXMgb2YgdGhlIEtub3dsZWRnZUJhc2UuXG4gICAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBvZiBQaW5lY29uZVZlY3RvclN0b3JlLCBWZWN0b3JTdG9yZVR5cGUuXG4gICAqIEBpbnRlcm5hbCBUaGlzIGlzIGFuIGludGVybmFsIGNvcmUgZnVuY3Rpb24gYW5kIHNob3VsZCBub3QgYmUgY2FsbGVkIGRpcmVjdGx5LlxuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVQaW5lY29uZVZlY3RvclN0b3JlKHByb3BzOiBWZWN0b3JLbm93bGVkZ2VCYXNlUHJvcHMpOiB7XG4gICAgdmVjdG9yU3RvcmU6IFBpbmVjb25lVmVjdG9yU3RvcmU7XG4gICAgdmVjdG9yU3RvcmVUeXBlOiBWZWN0b3JTdG9yZVR5cGU7XG4gIH0ge1xuICAgIGNvbnN0IHZlY3RvclN0b3JlID0gcHJvcHMudmVjdG9yU3RvcmUgYXMgUGluZWNvbmVWZWN0b3JTdG9yZTtcbiAgICByZXR1cm4ge1xuICAgICAgdmVjdG9yU3RvcmU6IHZlY3RvclN0b3JlLFxuICAgICAgdmVjdG9yU3RvcmVUeXBlOiBWZWN0b3JTdG9yZVR5cGUuUElORUNPTkUsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgQW1hem9uQXVyb3JhVmVjdG9yU3RvcmUgdHlwZSBvZiBWZWN0b3JTdG9yZS5cbiAgICpcbiAgICogQHBhcmFtIHByb3BzIC0gVGhlIHByb3BlcnRpZXMgb2YgdGhlIEtub3dsZWRnZUJhc2UuXG4gICAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBvZiBBbWF6b25BdXJvcmFWZWN0b3JTdG9yZSwgVmVjdG9yU3RvcmVUeXBlLlxuICAgKiBAaW50ZXJuYWwgVGhpcyBpcyBhbiBpbnRlcm5hbCBjb3JlIGZ1bmN0aW9uIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseS5cbiAgICovXG4gIHByaXZhdGUgaGFuZGxlQW1hem9uQXVyb3JhVmVjdG9yU3RvcmUocHJvcHM6IFZlY3Rvcktub3dsZWRnZUJhc2VQcm9wcyk6IHtcbiAgICB2ZWN0b3JTdG9yZTogQW1hem9uQXVyb3JhVmVjdG9yU3RvcmUgfCBFeGlzdGluZ0FtYXpvbkF1cm9yYVZlY3RvclN0b3JlO1xuICAgIHZlY3RvclN0b3JlVHlwZTogVmVjdG9yU3RvcmVUeXBlO1xuICB9IHtcbiAgICBjb25zdCB2ZWN0b3JTdG9yZSA9XG4gICAgICBwcm9wcy52ZWN0b3JTdG9yZSBpbnN0YW5jZW9mIEV4aXN0aW5nQW1hem9uQXVyb3JhVmVjdG9yU3RvcmVcbiAgICAgICAgPyBwcm9wcy52ZWN0b3JTdG9yZVxuICAgICAgICA6IChwcm9wcy52ZWN0b3JTdG9yZSBhcyBBbWF6b25BdXJvcmFWZWN0b3JTdG9yZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlY3RvclN0b3JlOiB2ZWN0b3JTdG9yZSxcbiAgICAgIHZlY3RvclN0b3JlVHlwZTogVmVjdG9yU3RvcmVUeXBlLkFNQVpPTl9BVVJPUkEsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgdGhlIGRlZmF1bHQgVmVjdG9yU3RvcmUgdHlwZS5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIGluc3RhbmNlIG9mIFZlY3RvckNvbGxlY3Rpb24sIFZlY3RvclN0b3JlVHlwZS5cbiAgICogQGludGVybmFsIFRoaXMgaXMgYW4gaW50ZXJuYWwgY29yZSBmdW5jdGlvbiBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZGlyZWN0bHkuXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZU9wZW5TZWFyY2hEZWZhdWx0VmVjdG9yQ29sbGVjdGlvbigpOiB7XG4gICAgdmVjdG9yU3RvcmU6IFZlY3RvckNvbGxlY3Rpb247XG4gICAgdmVjdG9yU3RvcmVUeXBlOiBWZWN0b3JTdG9yZVR5cGU7XG4gIH0ge1xuICAgIGNvbnN0IHZlY3RvclN0b3JlID0gbmV3IFZlY3RvckNvbGxlY3Rpb24odGhpcywgJ0tCVmVjdG9ycycpO1xuICAgIHZlY3RvclN0b3JlLmdyYW50RGF0YUFjY2Vzcyh0aGlzLnJvbGUpO1xuICAgIHJldHVybiB7XG4gICAgICB2ZWN0b3JTdG9yZTogdmVjdG9yU3RvcmUsXG4gICAgICB2ZWN0b3JTdG9yZVR5cGU6IFZlY3RvclN0b3JlVHlwZS5PUEVOU0VBUkNIX1NFUlZFUkxFU1MsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NvY2lhdGUga25vd2xlZGdlIGJhc2Ugd2l0aCBhbiBhZ2VudFxuICAgKi9cbiAgcHVibGljIGFzc29jaWF0ZVRvQWdlbnQoYWdlbnQ6IEFnZW50KSB7XG4gICAgYWdlbnQuYWRkS25vd2xlZGdlQmFzZSh0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIHRoYXQgQmVkcm9jayBLbm93bGVkZ2UgQmFzZSBjYW4gdXNlIHRoZSBzZWxlY3RlZCBtb2RlbC5cbiAqXG4gKiBAaW50ZXJuYWwgVGhpcyBpcyBhbiBpbnRlcm5hbCBjb3JlIGZ1bmN0aW9uIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVNb2RlbChmb3VuZGF0aW9uTW9kZWw6IEJlZHJvY2tGb3VuZGF0aW9uTW9kZWwsIHZlY3RvclR5cGU6IFZlY3RvclR5cGUpIHtcbiAgaWYgKCFmb3VuZGF0aW9uTW9kZWwuc3VwcG9ydHNLbm93bGVkZ2VCYXNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgbW9kZWwgJHtmb3VuZGF0aW9uTW9kZWx9IGlzIG5vdCBzdXBwb3J0ZWQgYnkgQmVkcm9jayBLbm93bGVkZ2UgQmFzZS5gKTtcbiAgfVxuICBpZiAoZm91bmRhdGlvbk1vZGVsLnN1cHBvcnRlZFZlY3RvclR5cGUgJiYgIWZvdW5kYXRpb25Nb2RlbC5zdXBwb3J0ZWRWZWN0b3JUeXBlLmluY2x1ZGVzKHZlY3RvclR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgdmVjdG9yIHR5cGUgJHt2ZWN0b3JUeXBlfSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBtb2RlbCAke2ZvdW5kYXRpb25Nb2RlbH0uYCk7XG4gIH1cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSB0aGF0IHRoZSBzdG9yYWdlIGNvbmZpZ3VyYXRpb24gY2FuIHVzZSB0aGUgc2VsZWN0ZWQgdmVjdG9yIHR5cGUuXG4gKiBJdCBwcmV2ZW50cyB0aGUgdXNlIG9mIHZlY3RvciB0eXBlcyB3aXRoIHZlY3RvciBzdG9yZXMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGVtLFxuICogdGhlcmVieSBhdm9pZGluZyBwb3RlbnRpYWwgcnVudGltZSBlcnJvcnMuXG4gKlxuICogQGludGVybmFsIFRoaXMgaXMgYW4gaW50ZXJuYWwgY29yZSBmdW5jdGlvbiBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZGlyZWN0bHkuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlVmVjdG9yVHlwZSh2ZWN0b3JTdG9yZTogYW55LCB2ZWN0b3JUeXBlOiBWZWN0b3JUeXBlKSB7XG4gIGlmICghKHZlY3RvclN0b3JlIGluc3RhbmNlb2YgVmVjdG9yQ29sbGVjdGlvbikgJiYgKHZlY3RvclR5cGUgPT0gVmVjdG9yVHlwZS5CSU5BUlkpKSB7XG4gICAgY29uc29sZS5sb2codmVjdG9yU3RvcmUpO1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdBbWF6b24gT3BlblNlYXJjaCBTZXJ2ZXJsZXNzIGlzIGN1cnJlbnRseSB0aGUgb25seSB2ZWN0b3Igc3RvcmUgdGhhdCBzdXBwb3J0cyBzdG9yaW5nIGJpbmFyeSB2ZWN0b3JzLicsXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIGlmIFZlY3RvckluZGV4IHdhcyBwcm92aWRlZCBmb3IgYSBWZWN0b3JTdG9yZSBvZiB0eXBlXG4gKiBvdGhlciB0aGFuIGBWZWN0b3JDb2xsZWN0aW9uYC5cbiAqXG4gKiBAaW50ZXJuYWwgVGhpcyBpcyBhbiBpbnRlcm5hbCBjb3JlIGZ1bmN0aW9uIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVWZWN0b3JJbmRleCh2ZWN0b3JTdG9yZTogYW55LCB2ZWN0b3JJbmRleDogYW55LCB2ZWN0b3JGaWVsZDogYW55LCBpbmRleE5hbWU6IGFueSkge1xuICBpZiAoISh2ZWN0b3JTdG9yZSBpbnN0YW5jZW9mIFZlY3RvckNvbGxlY3Rpb24pICYmIHZlY3RvckluZGV4KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0lmIHZlY3RvclN0b3JlIGlzIG5vdCBvZiB0eXBlIFZlY3RvckNvbGxlY3Rpb24sIHZlY3RvckluZGV4IHNob3VsZCBub3QgYmUgcHJvdmlkZWQgJyArXG4gICAgICAgICdpbiBLbm93bGVkZ2VCYXNlIGNvbnN0cnVjdC4nLFxuICAgICk7XG4gIH1cbiAgaWYgKCEodmVjdG9yU3RvcmUgaW5zdGFuY2VvZiBWZWN0b3JDb2xsZWN0aW9uKSAmJiBpbmRleE5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnSWYgdmVjdG9yU3RvcmUgaXMgbm90IG9mIHR5cGUgVmVjdG9yQ29sbGVjdGlvbiwgaW5kZXhOYW1lIHNob3VsZCBub3QgYmUgcHJvdmlkZWQgJyArXG4gICAgICAgICdpbiBLbm93bGVkZ2VCYXNlIGNvbnN0cnVjdC4nLFxuICAgICk7XG4gIH1cbiAgaWYgKCEodmVjdG9yU3RvcmUgaW5zdGFuY2VvZiBWZWN0b3JDb2xsZWN0aW9uKSAmJiB2ZWN0b3JGaWVsZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdJZiB2ZWN0b3JTdG9yZSBpcyBub3Qgb2YgdHlwZSBWZWN0b3JDb2xsZWN0aW9uLCB2ZWN0b3JGaWVsZCBzaG91bGQgbm90IGJlIHByb3ZpZGVkICcgK1xuICAgICAgICAnaW4gS25vd2xlZGdlQmFzZSBjb25zdHJ1Y3QuJyxcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogVmFsaWRhdGUgdGhhdCBpbmRleE5hbWUgYW5kIHZlY3RvckZpZWxkIHBhcmFtZXRlcnMgYXJlIGlkZW50aWNhbFxuICogaW4gS25vd2xlZGdlQmFzZSBjb25zdHJ1Y3QgaWYgVmVjdG9ySW5kZXggd2FzIGNyZWF0ZWQgbWFudWFsbHkuXG4gKlxuICogQnkgZGVmYXVsdCB3ZSBhc3NpZ24gYHZlY3RvckluZGV4YCB0byBgYmVkcm9jay1rbm93bGVkZ2UtYmFzZS1kZWZhdWx0LWluZGV4YFxuICogdmFsdWUgYW5kIGlmIHVzZXIgcHJvdmlkZXMgYHZlY3RvckluZGV4YCBtYW51YWxseSwgd2UgbmVlZCB0byBtYWtlIHN1cmVcbiAqIHRoZXkgYWxzbyBwcm92aWRlIGl0IGluIEtub3dsZWRnZUJhc2UgY29uc3RydWN0IGlmIHRoZSB2YWx1ZSBpcyBub3RcbiAqIGBiZWRyb2NrLWtub3dsZWRnZS1iYXNlLWRlZmF1bHQtaW5kZXhgLiBTYW1lIGZvciB2ZWN0b3JGaWVsZC5cbiAqXG4gKiBAaW50ZXJuYWwgVGhpcyBpcyBhbiBpbnRlcm5hbCBjb3JlIGZ1bmN0aW9uIGFuZCBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVJbmRleFBhcmFtZXRlcnModmVjdG9ySW5kZXg6IFZlY3RvckluZGV4LCBpbmRleE5hbWU6IHN0cmluZywgdmVjdG9yRmllbGQ6IHN0cmluZykge1xuICBpZiAodmVjdG9ySW5kZXguaW5kZXhOYW1lICE9PSAnYmVkcm9jay1rbm93bGVkZ2UtYmFzZS1kZWZhdWx0LWluZGV4Jykge1xuICAgIGlmICh2ZWN0b3JJbmRleC5pbmRleE5hbWUgIT09IGluZGV4TmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnRGVmYXVsdCB2YWx1ZSBvZiBpbmRleE5hbWUgaXMgYGJlZHJvY2sta25vd2xlZGdlLWJhc2UtZGVmYXVsdC1pbmRleGAuJyArXG4gICAgICAgICAgJyBJZiB5b3UgY3JlYXRlIFZlY3RvckluZGV4IG1hbnVhbGx5IGFuZCBhc3NpZ24gdmVjdG9ySW5kZXggdG8gdmFsdWUgb3RoZXIgdGhhbicgK1xuICAgICAgICAgICcgYGJlZHJvY2sta25vd2xlZGdlLWJhc2UtZGVmYXVsdC1pbmRleGAgdGhlbiB5b3UgbXVzdCBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGluIEtub3dsZWRnZUJhc2UgY29uc3RydWN0LicgK1xuICAgICAgICAgICcgSWYgeW91IGNyZWF0ZWQgVmVjdG9ySW5kZXggbWFudWFsbHkgYW5kIHNldCBpdCB0byBgYmVkcm9jay1rbm93bGVkZ2UtYmFzZS1kZWZhdWx0LWluZGV4YCcgK1xuICAgICAgICAgICcgdGhlbiBkbyBub3QgYXNzaWduIGluZGV4TmFtZSBpbiBLbm93bGVkZ2VCYXNlIGNvbnN0cnVjdC4nLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZlY3RvckluZGV4LnZlY3RvckZpZWxkICE9PSAnYmVkcm9jay1rbm93bGVkZ2UtYmFzZS1kZWZhdWx0LXZlY3RvcicpIHtcbiAgICBpZiAodmVjdG9ySW5kZXgudmVjdG9yRmllbGQgIT09IHZlY3RvckZpZWxkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdEZWZhdWx0IHZhbHVlIG9mIHZlY3RvckZpZWxkIGlzIGBiZWRyb2NrLWtub3dsZWRnZS1iYXNlLWRlZmF1bHQtdmVjdG9yYC4nICtcbiAgICAgICAgICAnIElmIHlvdSBjcmVhdGUgVmVjdG9ySW5kZXggbWFudWFsbHkgYW5kIGFzc2lnbiB2ZWN0b3JGaWVsZCB0byB2YWx1ZSBvdGhlciB0aGFuJyArXG4gICAgICAgICAgJyBgYmVkcm9jay1rbm93bGVkZ2UtYmFzZS1kZWZhdWx0LWZpZWxkYCB0aGVuIHlvdSBtdXN0IHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgaW4gS25vd2xlZGdlQmFzZSBjb25zdHJ1Y3QuJyArXG4gICAgICAgICAgJyBJZiB5b3UgY3JlYXRlZCBWZWN0b3JJbmRleCBtYW51YWxseSBhbmQgc2V0IGl0IHRvIGBiZWRyb2NrLWtub3dsZWRnZS1iYXNlLWRlZmF1bHQtdmVjdG9yYCcgK1xuICAgICAgICAgICcgdGhlbiBkbyBub3QgYXNzaWduIHZlY3RvckZpZWxkIGluIEtub3dsZWRnZUJhc2UgY29uc3RydWN0LicsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERldGVybWluZSBzdG9yYWdlIGNvbmZpZ3VyYXRpb24gYmFzZWQgb24gdmVjdG9yIHN0b3JlIHR5cGUuXG4gKlxuICogQGludGVybmFsIFRoaXMgaXMgYW4gaW50ZXJuYWwgY29yZSBmdW5jdGlvbiBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZGlyZWN0bHkuXG4gKi9cbmZ1bmN0aW9uIGdldFN0b3JhZ2VDb25maWd1cmF0aW9uKHBhcmFtczogU3RvcmFnZUNvbmZpZ3VyYXRpb24pOiBhbnkge1xuICBzd2l0Y2ggKHBhcmFtcy52ZWN0b3JTdG9yZVR5cGUpIHtcbiAgICBjYXNlIFZlY3RvclN0b3JlVHlwZS5PUEVOU0VBUkNIX1NFUlZFUkxFU1M6XG4gICAgICBwYXJhbXMudmVjdG9yU3RvcmUgPSBwYXJhbXMudmVjdG9yU3RvcmUgYXMgVmVjdG9yQ29sbGVjdGlvbjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFZlY3RvclN0b3JlVHlwZS5PUEVOU0VBUkNIX1NFUlZFUkxFU1MsXG4gICAgICAgIG9wZW5zZWFyY2hTZXJ2ZXJsZXNzQ29uZmlndXJhdGlvbjoge1xuICAgICAgICAgIGNvbGxlY3Rpb25Bcm46IHBhcmFtcy52ZWN0b3JTdG9yZS5jb2xsZWN0aW9uQXJuLFxuICAgICAgICAgIGZpZWxkTWFwcGluZzoge1xuICAgICAgICAgICAgdmVjdG9yRmllbGQ6IHBhcmFtcy52ZWN0b3JGaWVsZCxcbiAgICAgICAgICAgIHRleHRGaWVsZDogcGFyYW1zLnRleHRGaWVsZCxcbiAgICAgICAgICAgIG1ldGFkYXRhRmllbGQ6IHBhcmFtcy5tZXRhZGF0YUZpZWxkLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdmVjdG9ySW5kZXhOYW1lOiBwYXJhbXMuaW5kZXhOYW1lLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlIFZlY3RvclN0b3JlVHlwZS5QSU5FQ09ORTpcbiAgICAgIHBhcmFtcy52ZWN0b3JTdG9yZSA9IHBhcmFtcy52ZWN0b3JTdG9yZSBhcyBQaW5lY29uZVZlY3RvclN0b3JlO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogVmVjdG9yU3RvcmVUeXBlLlBJTkVDT05FLFxuICAgICAgICBwaW5lY29uZUNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICBuYW1lc3BhY2U6IHBhcmFtcy52ZWN0b3JTdG9yZS5uYW1lc3BhY2UgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIGNvbm5lY3Rpb25TdHJpbmc6IHBhcmFtcy52ZWN0b3JTdG9yZS5jb25uZWN0aW9uU3RyaW5nLFxuICAgICAgICAgIGNyZWRlbnRpYWxzU2VjcmV0QXJuOiBwYXJhbXMudmVjdG9yU3RvcmUuY3JlZGVudGlhbHNTZWNyZXRBcm4sXG4gICAgICAgICAgZmllbGRNYXBwaW5nOiB7XG4gICAgICAgICAgICB0ZXh0RmllbGQ6IHBhcmFtcy50ZXh0RmllbGQsXG4gICAgICAgICAgICBtZXRhZGF0YUZpZWxkOiBwYXJhbXMubWV0YWRhdGFGaWVsZCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlIFZlY3RvclN0b3JlVHlwZS5BTUFaT05fQVVST1JBOlxuICAgICAgcGFyYW1zLnZlY3RvclN0b3JlID1cbiAgICAgICAgcGFyYW1zLnZlY3RvclN0b3JlIGluc3RhbmNlb2YgRXhpc3RpbmdBbWF6b25BdXJvcmFWZWN0b3JTdG9yZVxuICAgICAgICAgID8gcGFyYW1zLnZlY3RvclN0b3JlXG4gICAgICAgICAgOiAocGFyYW1zLnZlY3RvclN0b3JlIGFzIEFtYXpvbkF1cm9yYVZlY3RvclN0b3JlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFZlY3RvclN0b3JlVHlwZS5BTUFaT05fQVVST1JBLFxuICAgICAgICByZHNDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgY3JlZGVudGlhbHNTZWNyZXRBcm46IHBhcmFtcy52ZWN0b3JTdG9yZS5jcmVkZW50aWFsc1NlY3JldEFybixcbiAgICAgICAgICBkYXRhYmFzZU5hbWU6IHBhcmFtcy52ZWN0b3JTdG9yZS5kYXRhYmFzZU5hbWUsXG4gICAgICAgICAgcmVzb3VyY2VBcm46IHBhcmFtcy52ZWN0b3JTdG9yZS5yZXNvdXJjZUFybixcbiAgICAgICAgICB0YWJsZU5hbWU6IGAke3BhcmFtcy52ZWN0b3JTdG9yZS5zY2hlbWFOYW1lfS4ke3BhcmFtcy52ZWN0b3JTdG9yZS50YWJsZU5hbWV9YCxcbiAgICAgICAgICBmaWVsZE1hcHBpbmc6IHtcbiAgICAgICAgICAgIHZlY3RvckZpZWxkOiBwYXJhbXMudmVjdG9yRmllbGQucmVwbGFjZSgvLS9nLCAnXycpLFxuICAgICAgICAgICAgcHJpbWFyeUtleUZpZWxkOiBwYXJhbXMudmVjdG9yU3RvcmUucHJpbWFyeUtleUZpZWxkLFxuICAgICAgICAgICAgdGV4dEZpZWxkOiBwYXJhbXMudGV4dEZpZWxkLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBtZXRhZGF0YUZpZWxkOiBwYXJhbXMubWV0YWRhdGFGaWVsZC50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHZlY3RvciBzdG9yZSB0eXBlOiAke3BhcmFtcy52ZWN0b3JTdG9yZVR5cGV9YCk7XG4gIH1cbn1cbiJdfQ==