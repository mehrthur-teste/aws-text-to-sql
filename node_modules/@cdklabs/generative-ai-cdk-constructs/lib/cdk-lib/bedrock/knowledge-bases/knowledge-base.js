"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeBaseBase = exports.KnowledgeBaseType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
/******************************************************************************
 *                              ENUMS
 *****************************************************************************/
/**
 * Types of possible knowledge bases supported by Amazon Bedrock Knowledge Bases.
 */
var KnowledgeBaseType;
(function (KnowledgeBaseType) {
    /**
     * Vector database with emebeddings vectors
     * @see https://docs.aws.amazon.com/bedrock/latest/userguide/kb-how-it-works.html
     */
    KnowledgeBaseType["VECTOR"] = "VECTOR";
    /**
     * Kendra GenAI Index
     * @see https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-kendra-genai-index.html
     */
    KnowledgeBaseType["KENDRA"] = "KENDRA";
    /**
     * Structured data store (e.g. REDSHIFT)
     * @see https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-build-structured.html
     */
    KnowledgeBaseType["SQL"] = "SQL";
})(KnowledgeBaseType || (exports.KnowledgeBaseType = KnowledgeBaseType = {}));
/******************************************************************************
 *                              ABSTRACT CLASS
 *****************************************************************************/
/**
 * Abstract base class for Knowledge Base (regarless the type).
 * Contains methods valid for KBs either created with CDK or imported and
 * applicable to Knowledge Bases of any type.
 */
class KnowledgeBaseBase extends aws_cdk_lib_1.Resource {
    constructor(scope, id) {
        super(scope, id);
    }
    /**
     * Grant the given principal identity permissions to perform actions on this knowledge base.
     */
    grant(grantee, ...actions) {
        return iam.Grant.addToPrincipal({
            grantee,
            resourceArns: [this.knowledgeBaseArn],
            actions,
        });
    }
    /**
     * Grant the given identity permissions to retrieve content from the knowledge base.
     */
    grantRetrieve(grantee) {
        return this.grant(grantee, 'bedrock:Retrieve');
    }
    /**
     * Grant the given identity permissions to retrieve content from the knowledge base.
     */
    grantRetrieveAndGenerate(grantee) {
        return this.grant(grantee, 'bedrock:RetrieveAndGenerate');
    }
    /**
     * Grant the given identity permissions to query the knowledge base.
     * This contains:
     * - Retrieve
     * - RetrieveAndGenerate
     */
    grantQuery(grantee) {
        return this.grant(grantee, 'bedrock:Retrieve', 'bedrock:RetrieveAndGenerate');
    }
}
exports.KnowledgeBaseBase = KnowledgeBaseBase;
_a = JSII_RTTI_SYMBOL_1;
KnowledgeBaseBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.KnowledgeBaseBase", version: "0.1.293" };
//# sourceMappingURL=data:application/json;base64,