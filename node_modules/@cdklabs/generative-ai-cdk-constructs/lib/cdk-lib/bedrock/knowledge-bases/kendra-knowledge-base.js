"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.KendraKnowledgeBase = exports.KendraKnowledgeBaseBase = exports.KnowledgeBaseBase = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
var knowledge_base_1 = require("./knowledge-base");
Object.defineProperty(exports, "KnowledgeBaseBase", { enumerable: true, get: function () { return knowledge_base_1.KnowledgeBaseBase; } });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const bedrock = require("aws-cdk-lib/aws-bedrock");
const iam = require("aws-cdk-lib/aws-iam");
const knowledge_base_2 = require("./knowledge-base");
const utils_1 = require("../../../common/helpers/utils");
/******************************************************************************
 *                              ABSTRACT CLASS
 *****************************************************************************/
class KendraKnowledgeBaseBase extends knowledge_base_2.KnowledgeBaseBase {
    constructor() {
        super(...arguments);
        this.type = knowledge_base_2.KnowledgeBaseType.KENDRA;
    }
}
exports.KendraKnowledgeBaseBase = KendraKnowledgeBaseBase;
_a = JSII_RTTI_SYMBOL_1;
KendraKnowledgeBaseBase[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.KendraKnowledgeBaseBase", version: "0.1.293" };
/******************************************************************************
 *                        		  CONSTRUCT
 *****************************************************************************/
class KendraKnowledgeBase extends KendraKnowledgeBaseBase {
    // ------------------------------------------------------
    // Import Methods
    // ------------------------------------------------------
    static fromKnowledgeBaseAttributes(scope, id, attrs) {
        const stack = aws_cdk_lib_1.Stack.of(scope);
        class Import extends KendraKnowledgeBaseBase {
            constructor() {
                super(...arguments);
                this.role = iam.Role.fromRoleArn(this, `kb-${attrs.knowledgeBaseId}-role`, attrs.executionRoleArn);
                this.description = attrs.description;
                this.instruction = attrs.instruction;
                this.knowledgeBaseId = attrs.knowledgeBaseId;
                this.kendraIndex = attrs.kendraIndex;
                this.knowledgeBaseArn = stack.formatArn({
                    service: 'bedrock',
                    resource: 'knowledge-base',
                    resourceName: attrs.knowledgeBaseId,
                    arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                });
            }
        }
        return new Import(scope, id);
    }
    constructor(scope, id, props) {
        super(scope, id);
        /**
         * The type of Knowledge Base
         */
        this.type = knowledge_base_2.KnowledgeBaseType.KENDRA;
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        this.kendraIndex = props.kendraIndex;
        this.name = props.name ?? (0, utils_1.generatePhysicalNameV2)(this, 'kendra-kb', { maxLength: 32, separator: '-' });
        this.instruction = props.instruction;
        this.description = props.description;
        // ------------------------------------------------------
        // Role
        // ------------------------------------------------------
        let policyAddition;
        if (props.existingRole) {
            this.role = props.existingRole;
        }
        else {
            const roleName = (0, utils_1.generatePhysicalNameV2)(this, 'AmazonBedrockExecutionRoleForKnowledgeBase', { maxLength: 64 });
            this.role = new iam.Role(this, 'Role', {
                roleName: roleName,
                assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com', {
                    conditions: {
                        StringEquals: { 'aws:SourceAccount': aws_cdk_lib_1.Stack.of(this).account },
                        ArnLike: {
                            'aws:SourceArn': aws_cdk_lib_1.Stack.of(this).formatArn({
                                service: 'bedrock',
                                resource: 'knowledge-base',
                                resourceName: '*',
                                arnFormat: aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME,
                            }),
                        },
                    },
                }),
            });
            policyAddition = this.role.addToPrincipalPolicy(new iam.PolicyStatement({
                sid: 'AmazonBedrockKnowledgeBaseKendraIndexAccessStatement',
                actions: ['kendra:Retrieve', 'kendra:DescribeIndex'],
                resources: [this.kendraIndex.indexArn],
            }));
        }
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this._resource = new bedrock.CfnKnowledgeBase(this, 'MyCfnKnowledgeBase', {
            name: this.name,
            roleArn: this.role.roleArn,
            description: props.description,
            knowledgeBaseConfiguration: {
                type: knowledge_base_2.KnowledgeBaseType.KENDRA,
                kendraKnowledgeBaseConfiguration: {
                    kendraIndexArn: props.kendraIndex.indexArn,
                },
            },
        });
        // Ensure policy statement is added before creating KnowledgeBase
        this._resource.node.addDependency(policyAddition?.policyDependable);
        this.knowledgeBaseArn = this._resource.attrKnowledgeBaseArn;
        this.knowledgeBaseId = this._resource.attrKnowledgeBaseId;
    }
}
exports.KendraKnowledgeBase = KendraKnowledgeBase;
_b = JSII_RTTI_SYMBOL_1;
KendraKnowledgeBase[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.KendraKnowledgeBase", version: "0.1.293" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2VuZHJhLWtub3dsZWRnZS1iYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2Nkay1saWIvYmVkcm9jay9rbm93bGVkZ2UtYmFzZXMva2VuZHJhLWtub3dsZWRnZS1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCxtREFBcUQ7QUFBNUMsbUhBQUEsaUJBQWlCLE9BQUE7QUFDMUIsNkNBQStDO0FBQy9DLG1EQUFtRDtBQUNuRCwyQ0FBMkM7QUFFM0MscURBTTBCO0FBQzFCLHlEQUF1RTtBQXVDdkU7OytFQUUrRTtBQUMvRSxNQUFzQix1QkFBd0IsU0FBUSxrQ0FBaUI7SUFBdkU7O1FBT2tCLFNBQUksR0FBc0Isa0NBQWlCLENBQUMsTUFBTSxDQUFDO0tBQ3BFOztBQVJELDBEQVFDOzs7QUFFRDs7K0VBRStFO0FBQy9FLE1BQWEsbUJBQW9CLFNBQVEsdUJBQXVCO0lBQzlELHlEQUF5RDtJQUN6RCxpQkFBaUI7SUFDakIseURBQXlEO0lBQ2xELE1BQU0sQ0FBQywyQkFBMkIsQ0FDdkMsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLEtBQW9DO1FBRXBDLE1BQU0sS0FBSyxHQUFHLG1CQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTlCLE1BQU0sTUFBTyxTQUFRLHVCQUF1QjtZQUE1Qzs7Z0JBQ2tCLFNBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxLQUFLLENBQUMsZUFBZSxPQUFPLEVBQUUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQzlGLGdCQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztnQkFDaEMsZ0JBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO2dCQUNoQyxvQkFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7Z0JBQ3hDLGdCQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztnQkFDaEMscUJBQWdCLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztvQkFDakQsT0FBTyxFQUFFLFNBQVM7b0JBQ2xCLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFlBQVksRUFBRSxLQUFLLENBQUMsZUFBZTtvQkFDbkMsU0FBUyxFQUFFLHVCQUFTLENBQUMsbUJBQW1CO2lCQUN6QyxDQUFDLENBQUM7WUFDTCxDQUFDO1NBQUE7UUFDRCxPQUFPLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBMkJELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBK0I7UUFDdkUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQVJuQjs7V0FFRztRQUNhLFNBQUksR0FBc0Isa0NBQWlCLENBQUMsTUFBTSxDQUFDO1FBTWpFLHlEQUF5RDtRQUN6RCw2QkFBNkI7UUFDN0IseURBQXlEO1FBQ3pELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBQSw4QkFBc0IsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN2RyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDckMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBRXJDLHlEQUF5RDtRQUN6RCxPQUFPO1FBQ1AseURBQXlEO1FBQ3pELElBQUksY0FBMEQsQ0FBQztRQUMvRCxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFDakMsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLFFBQVEsR0FBRyxJQUFBLDhCQUFzQixFQUFDLElBQUksRUFBRSw0Q0FBNEMsRUFBRSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQy9HLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7Z0JBQ3JDLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixTQUFTLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLEVBQUU7b0JBQzNELFVBQVUsRUFBRTt3QkFDVixZQUFZLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxtQkFBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUU7d0JBQzdELE9BQU8sRUFBRTs0QkFDUCxlQUFlLEVBQUUsbUJBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO2dDQUN4QyxPQUFPLEVBQUUsU0FBUztnQ0FDbEIsUUFBUSxFQUFFLGdCQUFnQjtnQ0FDMUIsWUFBWSxFQUFFLEdBQUc7Z0NBQ2pCLFNBQVMsRUFBRSx1QkFBUyxDQUFDLG1CQUFtQjs2QkFDekMsQ0FBQzt5QkFDSDtxQkFDRjtpQkFDRixDQUFDO2FBQ0gsQ0FBQyxDQUFDO1lBQ0gsY0FBYyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQzdDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztnQkFDdEIsR0FBRyxFQUFFLHNEQUFzRDtnQkFDM0QsT0FBTyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsc0JBQXNCLENBQUM7Z0JBQ3BELFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDO2FBQ3ZDLENBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQztRQUNELHlEQUF5RDtRQUN6RCxtQkFBbUI7UUFDbkIseURBQXlEO1FBQ3pELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFO1lBQ3hFLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87WUFDMUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLDBCQUEwQixFQUFFO2dCQUMxQixJQUFJLEVBQUUsa0NBQWlCLENBQUMsTUFBTTtnQkFDOUIsZ0NBQWdDLEVBQUU7b0JBQ2hDLGNBQWMsRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVE7aUJBQzNDO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFFSCxpRUFBaUU7UUFDakUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxnQkFBaUIsQ0FBQyxDQUFDO1FBRXJFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDO1FBQzVELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztJQUM1RCxDQUFDOztBQWxISCxrREFtSEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqICBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKS4gWW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogIHdpdGggdGhlIExpY2Vuc2UuIEEgY29weSBvZiB0aGUgTGljZW5zZSBpcyBsb2NhdGVkIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgb3IgaW4gdGhlICdsaWNlbnNlJyBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVNcbiAqICBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuICogIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgeyBLbm93bGVkZ2VCYXNlQmFzZSB9IGZyb20gJy4va25vd2xlZGdlLWJhc2UnO1xuaW1wb3J0IHsgQXJuRm9ybWF0LCBTdGFjayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGJlZHJvY2sgZnJvbSAnYXdzLWNkay1saWIvYXdzLWJlZHJvY2snO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQge1xuICBDb21tb25Lbm93bGVkZ2VCYXNlQXR0cmlidXRlcyxcbiAgQ29tbW9uS25vd2xlZGdlQmFzZVByb3BzLFxuICBJS25vd2xlZGdlQmFzZSxcbiAgS25vd2xlZGdlQmFzZUJhc2UsXG4gIEtub3dsZWRnZUJhc2VUeXBlLFxufSBmcm9tICcuL2tub3dsZWRnZS1iYXNlJztcbmltcG9ydCB7IGdlbmVyYXRlUGh5c2ljYWxOYW1lVjIgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vaGVscGVycy91dGlscyc7XG5pbXBvcnQgeyBJS2VuZHJhR2VuQWlJbmRleCB9IGZyb20gJy4uLy4uL2tlbmRyYSc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDT01NT04gSU5URVJGQUNFU1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXhwb3J0IGludGVyZmFjZSBJS2VuZHJhS25vd2xlZGdlQmFzZSBleHRlbmRzIElLbm93bGVkZ2VCYXNlIHtcbiAgLyoqXG4gICAqIFRoZSBHZW5BSSBLZW5kcmEgSW5kZXguXG4gICAqL1xuICByZWFkb25seSBrZW5kcmFJbmRleDogSUtlbmRyYUdlbkFpSW5kZXg7XG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgUFJPUFMgRk9SIE5FVyBDT05TVFJVQ1RcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKlxuICogUHJvcGVydGllcyBmb3IgY3JlYXRpbmcgYSBLZW5kcmEgSW5kZXggS25vd2xlZGdlIEJhc2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgS2VuZHJhS25vd2xlZGdlQmFzZVByb3BzIGV4dGVuZHMgQ29tbW9uS25vd2xlZGdlQmFzZVByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBLZW5kcmEgSW5kZXggdG8gdXNlIGZvciB0aGUga25vd2xlZGdlIGJhc2UuXG4gICAqL1xuICByZWFkb25seSBrZW5kcmFJbmRleDogSUtlbmRyYUdlbkFpSW5kZXg7XG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgIEFUVFJTIEZPUiBJTVBPUlRFRCBDT05TVFJVQ1RcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKlxuICogUHJvcGVydGllcyBmb3IgaW1wb3J0aW5nIGEga25vd2xlZGdlIGJhc2Ugb3V0c2lkZSBvZiB0aGlzIHN0YWNrXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgS2VuZHJhS25vd2xlZGdlQmFzZUF0dHJpYnV0ZXMgZXh0ZW5kcyBDb21tb25Lbm93bGVkZ2VCYXNlQXR0cmlidXRlcyB7XG4gIC8qKlxuICAgKiBUaGUgR2VuQUkgS2VuZHJhIEluZGV4IEFSTi5cbiAgICovXG4gIHJlYWRvbmx5IGtlbmRyYUluZGV4OiBJS2VuZHJhR2VuQWlJbmRleDtcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBQlNUUkFDVCBDTEFTU1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEtlbmRyYUtub3dsZWRnZUJhc2VCYXNlIGV4dGVuZHMgS25vd2xlZGdlQmFzZUJhc2Uge1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkga25vd2xlZGdlQmFzZUFybjogc3RyaW5nO1xuICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkga25vd2xlZGdlQmFzZUlkOiBzdHJpbmc7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSByb2xlOiBpYW0uSVJvbGU7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBrZW5kcmFJbmRleDogSUtlbmRyYUdlbkFpSW5kZXg7XG4gIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGluc3RydWN0aW9uPzogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgdHlwZTogS25vd2xlZGdlQmFzZVR5cGUgPSBLbm93bGVkZ2VCYXNlVHlwZS5LRU5EUkE7XG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgXHRcdCAgQ09OU1RSVUNUXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5leHBvcnQgY2xhc3MgS2VuZHJhS25vd2xlZGdlQmFzZSBleHRlbmRzIEtlbmRyYUtub3dsZWRnZUJhc2VCYXNlIHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEltcG9ydCBNZXRob2RzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBwdWJsaWMgc3RhdGljIGZyb21Lbm93bGVkZ2VCYXNlQXR0cmlidXRlcyhcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgYXR0cnM6IEtlbmRyYUtub3dsZWRnZUJhc2VBdHRyaWJ1dGVzLFxuICApOiBJS2VuZHJhS25vd2xlZGdlQmFzZSB7XG4gICAgY29uc3Qgc3RhY2sgPSBTdGFjay5vZihzY29wZSk7XG5cbiAgICBjbGFzcyBJbXBvcnQgZXh0ZW5kcyBLZW5kcmFLbm93bGVkZ2VCYXNlQmFzZSB7XG4gICAgICBwdWJsaWMgcmVhZG9ubHkgcm9sZSA9IGlhbS5Sb2xlLmZyb21Sb2xlQXJuKHRoaXMsIGBrYi0ke2F0dHJzLmtub3dsZWRnZUJhc2VJZH0tcm9sZWAsIGF0dHJzLmV4ZWN1dGlvblJvbGVBcm4pO1xuICAgICAgcHVibGljIHJlYWRvbmx5IGRlc2NyaXB0aW9uID0gYXR0cnMuZGVzY3JpcHRpb247XG4gICAgICBwdWJsaWMgcmVhZG9ubHkgaW5zdHJ1Y3Rpb24gPSBhdHRycy5pbnN0cnVjdGlvbjtcbiAgICAgIHB1YmxpYyByZWFkb25seSBrbm93bGVkZ2VCYXNlSWQgPSBhdHRycy5rbm93bGVkZ2VCYXNlSWQ7XG4gICAgICBwdWJsaWMgcmVhZG9ubHkga2VuZHJhSW5kZXggPSBhdHRycy5rZW5kcmFJbmRleDtcbiAgICAgIHB1YmxpYyByZWFkb25seSBrbm93bGVkZ2VCYXNlQXJuID0gc3RhY2suZm9ybWF0QXJuKHtcbiAgICAgICAgc2VydmljZTogJ2JlZHJvY2snLFxuICAgICAgICByZXNvdXJjZTogJ2tub3dsZWRnZS1iYXNlJyxcbiAgICAgICAgcmVzb3VyY2VOYW1lOiBhdHRycy5rbm93bGVkZ2VCYXNlSWQsXG4gICAgICAgIGFybkZvcm1hdDogQXJuRm9ybWF0LlNMQVNIX1JFU09VUkNFX05BTUUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBJbXBvcnQoc2NvcGUsIGlkKTtcbiAgfVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQXR0cmlidXRlc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gaW5oZXJpdGVkXG4gIHB1YmxpYyByZWFkb25seSBrbm93bGVkZ2VCYXNlQXJuOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBrbm93bGVkZ2VCYXNlSWQ6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHJvbGU6IGlhbS5JUm9sZTtcbiAgcHVibGljIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgaW5zdHJ1Y3Rpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBrbm93bGVkZ2UgYmFzZS5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBHZW5BSSBLZW5kcmEgSW5kZXguXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkga2VuZHJhSW5kZXg6IElLZW5kcmFHZW5BaUluZGV4O1xuICAvKipcbiAgICogVGhlIHR5cGUgb2YgS25vd2xlZGdlIEJhc2VcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSB0eXBlOiBLbm93bGVkZ2VCYXNlVHlwZSA9IEtub3dsZWRnZUJhc2VUeXBlLktFTkRSQTtcblxuICBwcml2YXRlIHJlYWRvbmx5IF9yZXNvdXJjZTogYmVkcm9jay5DZm5Lbm93bGVkZ2VCYXNlO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBLZW5kcmFLbm93bGVkZ2VCYXNlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFNldCBwcm9wZXJ0aWVzIG9yIGRlZmF1bHRzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdGhpcy5rZW5kcmFJbmRleCA9IHByb3BzLmtlbmRyYUluZGV4O1xuICAgIHRoaXMubmFtZSA9IHByb3BzLm5hbWUgPz8gZ2VuZXJhdGVQaHlzaWNhbE5hbWVWMih0aGlzLCAna2VuZHJhLWtiJywgeyBtYXhMZW5ndGg6IDMyLCBzZXBhcmF0b3I6ICctJyB9KTtcbiAgICB0aGlzLmluc3RydWN0aW9uID0gcHJvcHMuaW5zdHJ1Y3Rpb247XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IHByb3BzLmRlc2NyaXB0aW9uO1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gUm9sZVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGxldCBwb2xpY3lBZGRpdGlvbjogaWFtLkFkZFRvUHJpbmNpcGFsUG9saWN5UmVzdWx0IHwgdW5kZWZpbmVkO1xuICAgIGlmIChwcm9wcy5leGlzdGluZ1JvbGUpIHtcbiAgICAgIHRoaXMucm9sZSA9IHByb3BzLmV4aXN0aW5nUm9sZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgcm9sZU5hbWUgPSBnZW5lcmF0ZVBoeXNpY2FsTmFtZVYyKHRoaXMsICdBbWF6b25CZWRyb2NrRXhlY3V0aW9uUm9sZUZvcktub3dsZWRnZUJhc2UnLCB7IG1heExlbmd0aDogNjQgfSk7XG4gICAgICB0aGlzLnJvbGUgPSBuZXcgaWFtLlJvbGUodGhpcywgJ1JvbGUnLCB7XG4gICAgICAgIHJvbGVOYW1lOiByb2xlTmFtZSxcbiAgICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2JlZHJvY2suYW1hem9uYXdzLmNvbScsIHtcbiAgICAgICAgICBjb25kaXRpb25zOiB7XG4gICAgICAgICAgICBTdHJpbmdFcXVhbHM6IHsgJ2F3czpTb3VyY2VBY2NvdW50JzogU3RhY2sub2YodGhpcykuYWNjb3VudCB9LFxuICAgICAgICAgICAgQXJuTGlrZToge1xuICAgICAgICAgICAgICAnYXdzOlNvdXJjZUFybic6IFN0YWNrLm9mKHRoaXMpLmZvcm1hdEFybih7XG4gICAgICAgICAgICAgICAgc2VydmljZTogJ2JlZHJvY2snLFxuICAgICAgICAgICAgICAgIHJlc291cmNlOiAna25vd2xlZGdlLWJhc2UnLFxuICAgICAgICAgICAgICAgIHJlc291cmNlTmFtZTogJyonLFxuICAgICAgICAgICAgICAgIGFybkZvcm1hdDogQXJuRm9ybWF0LlNMQVNIX1JFU09VUkNFX05BTUUsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgIH0pO1xuICAgICAgcG9saWN5QWRkaXRpb24gPSB0aGlzLnJvbGUuYWRkVG9QcmluY2lwYWxQb2xpY3koXG4gICAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBzaWQ6ICdBbWF6b25CZWRyb2NrS25vd2xlZGdlQmFzZUtlbmRyYUluZGV4QWNjZXNzU3RhdGVtZW50JyxcbiAgICAgICAgICBhY3Rpb25zOiBbJ2tlbmRyYTpSZXRyaWV2ZScsICdrZW5kcmE6RGVzY3JpYmVJbmRleCddLFxuICAgICAgICAgIHJlc291cmNlczogW3RoaXMua2VuZHJhSW5kZXguaW5kZXhBcm5dLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEwxIEluc3RhbnRpYXRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB0aGlzLl9yZXNvdXJjZSA9IG5ldyBiZWRyb2NrLkNmbktub3dsZWRnZUJhc2UodGhpcywgJ015Q2ZuS25vd2xlZGdlQmFzZScsIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHJvbGVBcm46IHRoaXMucm9sZS5yb2xlQXJuLFxuICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAga25vd2xlZGdlQmFzZUNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgdHlwZTogS25vd2xlZGdlQmFzZVR5cGUuS0VORFJBLFxuICAgICAgICBrZW5kcmFLbm93bGVkZ2VCYXNlQ29uZmlndXJhdGlvbjoge1xuICAgICAgICAgIGtlbmRyYUluZGV4QXJuOiBwcm9wcy5rZW5kcmFJbmRleC5pbmRleEFybixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBFbnN1cmUgcG9saWN5IHN0YXRlbWVudCBpcyBhZGRlZCBiZWZvcmUgY3JlYXRpbmcgS25vd2xlZGdlQmFzZVxuICAgIHRoaXMuX3Jlc291cmNlLm5vZGUuYWRkRGVwZW5kZW5jeShwb2xpY3lBZGRpdGlvbj8ucG9saWN5RGVwZW5kYWJsZSEpO1xuXG4gICAgdGhpcy5rbm93bGVkZ2VCYXNlQXJuID0gdGhpcy5fcmVzb3VyY2UuYXR0cktub3dsZWRnZUJhc2VBcm47XG4gICAgdGhpcy5rbm93bGVkZ2VCYXNlSWQgPSB0aGlzLl9yZXNvdXJjZS5hdHRyS25vd2xlZGdlQmFzZUlkO1xuICB9XG59XG4iXX0=